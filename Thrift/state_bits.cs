/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class state_bits : TBase
{
  private int _task;
  private int _inspection;
  private int _weight;
  private int _load;

  public int Task
  {
    get
    {
      return _task;
    }
    set
    {
      __isset.task = true;
      this._task = value;
    }
  }

  public int Inspection
  {
    get
    {
      return _inspection;
    }
    set
    {
      __isset.inspection = true;
      this._inspection = value;
    }
  }

  public int Weight
  {
    get
    {
      return _weight;
    }
    set
    {
      __isset.weight = true;
      this._weight = value;
    }
  }

  public int Load
  {
    get
    {
      return _load;
    }
    set
    {
      __isset.load = true;
      this._load = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool task;
    public bool inspection;
    public bool weight;
    public bool load;
  }

  public state_bits() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Task = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Inspection = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Weight = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Load = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("state_bits");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.task) {
        field.Name = "task";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Task);
        oprot.WriteFieldEnd();
      }
      if (__isset.inspection) {
        field.Name = "inspection";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Inspection);
        oprot.WriteFieldEnd();
      }
      if (__isset.weight) {
        field.Name = "weight";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Weight);
        oprot.WriteFieldEnd();
      }
      if (__isset.load) {
        field.Name = "load";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Load);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("state_bits(");
    bool __first = true;
    if (__isset.task) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Task: ");
      __sb.Append(Task);
    }
    if (__isset.inspection) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Inspection: ");
      __sb.Append(Inspection);
    }
    if (__isset.weight) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Weight: ");
      __sb.Append(Weight);
    }
    if (__isset.load) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Load: ");
      __sb.Append(Load);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

