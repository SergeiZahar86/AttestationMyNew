/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class DataProviderService {
  public interface ISync {
    List<cause_t> getCauses();
    List<contractor_t> getContractors();
    List<mat_t> getMat();
    photo_t getPhoto(string part_id, int car_id);
    part_t getPart();
    state_bits getStatusBits();
    info_dp getInfoDP();
    bool setNum(string part_id, int car_id, string num);
    bool setAtt(string part_id, int car_id, int att_code);
    bool setUser(string part_id, string user);
    bool setTara(string part_id, int car_id, double tara);
    bool setZone(string part_id, int car_id, int zone);
    bool setCarry(string part_id, int car_id, double carry);
    bool setShipper(string part_id, int car_id, int shipper);
    bool setConsigner(string part_id, int car_id, int consigner);
    bool setMat(string part_id, int car_id, int mat);
    bool setCar(string part_id, int car_id, car_t car);
    bool setCause(string part_id, int car_id, int cause_id);
    bool endAtt(string userLogin);
    string createTask(string userLogin, PusherPosition position);
    void endTask(string userLogin);
    void removeTask(string userLogin);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_getCauses(AsyncCallback callback, object state);
    List<cause_t> End_getCauses(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getContractors(AsyncCallback callback, object state);
    List<contractor_t> End_getContractors(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMat(AsyncCallback callback, object state);
    List<mat_t> End_getMat(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPhoto(AsyncCallback callback, object state, string part_id, int car_id);
    photo_t End_getPhoto(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPart(AsyncCallback callback, object state);
    part_t End_getPart(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getStatusBits(AsyncCallback callback, object state);
    state_bits End_getStatusBits(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getInfoDP(AsyncCallback callback, object state);
    info_dp End_getInfoDP(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setNum(AsyncCallback callback, object state, string part_id, int car_id, string num);
    bool End_setNum(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setAtt(AsyncCallback callback, object state, string part_id, int car_id, int att_code);
    bool End_setAtt(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setUser(AsyncCallback callback, object state, string part_id, string user);
    bool End_setUser(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setTara(AsyncCallback callback, object state, string part_id, int car_id, double tara);
    bool End_setTara(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setZone(AsyncCallback callback, object state, string part_id, int car_id, int zone);
    bool End_setZone(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setCarry(AsyncCallback callback, object state, string part_id, int car_id, double carry);
    bool End_setCarry(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setShipper(AsyncCallback callback, object state, string part_id, int car_id, int shipper);
    bool End_setShipper(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setConsigner(AsyncCallback callback, object state, string part_id, int car_id, int consigner);
    bool End_setConsigner(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setMat(AsyncCallback callback, object state, string part_id, int car_id, int mat);
    bool End_setMat(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setCar(AsyncCallback callback, object state, string part_id, int car_id, car_t car);
    bool End_setCar(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setCause(AsyncCallback callback, object state, string part_id, int car_id, int cause_id);
    bool End_setCause(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_endAtt(AsyncCallback callback, object state, string userLogin);
    bool End_endAtt(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_createTask(AsyncCallback callback, object state, string userLogin, PusherPosition position);
    string End_createTask(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_endTask(AsyncCallback callback, object state, string userLogin);
    void End_endTask(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_removeTask(AsyncCallback callback, object state, string userLogin);
    void End_removeTask(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getCauses(AsyncCallback callback, object state)
    {
      return send_getCauses(callback, state);
    }

    public List<cause_t> End_getCauses(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCauses();
    }

    #endif

    public List<cause_t> getCauses()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getCauses(null, null);
      return End_getCauses(asyncResult);

      #else
      send_getCauses();
      return recv_getCauses();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCauses(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getCauses", TMessageType.Call, seqid_));
      getCauses_args args = new getCauses_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getCauses()
    {
      oprot_.WriteMessageBegin(new TMessage("getCauses", TMessageType.Call, seqid_));
      getCauses_args args = new getCauses_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<cause_t> recv_getCauses()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCauses_result result = new getCauses_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCauses failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getContractors(AsyncCallback callback, object state)
    {
      return send_getContractors(callback, state);
    }

    public List<contractor_t> End_getContractors(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getContractors();
    }

    #endif

    public List<contractor_t> getContractors()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getContractors(null, null);
      return End_getContractors(asyncResult);

      #else
      send_getContractors();
      return recv_getContractors();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getContractors(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getContractors", TMessageType.Call, seqid_));
      getContractors_args args = new getContractors_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getContractors()
    {
      oprot_.WriteMessageBegin(new TMessage("getContractors", TMessageType.Call, seqid_));
      getContractors_args args = new getContractors_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<contractor_t> recv_getContractors()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getContractors_result result = new getContractors_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContractors failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMat(AsyncCallback callback, object state)
    {
      return send_getMat(callback, state);
    }

    public List<mat_t> End_getMat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMat();
    }

    #endif

    public List<mat_t> getMat()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMat(null, null);
      return End_getMat(asyncResult);

      #else
      send_getMat();
      return recv_getMat();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMat(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getMat", TMessageType.Call, seqid_));
      getMat_args args = new getMat_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMat()
    {
      oprot_.WriteMessageBegin(new TMessage("getMat", TMessageType.Call, seqid_));
      getMat_args args = new getMat_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<mat_t> recv_getMat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMat_result result = new getMat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMat failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPhoto(AsyncCallback callback, object state, string part_id, int car_id)
    {
      return send_getPhoto(callback, state, part_id, car_id);
    }

    public photo_t End_getPhoto(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPhoto();
    }

    #endif

    public photo_t getPhoto(string part_id, int car_id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPhoto(null, null, part_id, car_id);
      return End_getPhoto(asyncResult);

      #else
      send_getPhoto(part_id, car_id);
      return recv_getPhoto();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPhoto(AsyncCallback callback, object state, string part_id, int car_id)
    {
      oprot_.WriteMessageBegin(new TMessage("getPhoto", TMessageType.Call, seqid_));
      getPhoto_args args = new getPhoto_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPhoto(string part_id, int car_id)
    {
      oprot_.WriteMessageBegin(new TMessage("getPhoto", TMessageType.Call, seqid_));
      getPhoto_args args = new getPhoto_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public photo_t recv_getPhoto()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPhoto_result result = new getPhoto_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPhoto failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPart(AsyncCallback callback, object state)
    {
      return send_getPart(callback, state);
    }

    public part_t End_getPart(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPart();
    }

    #endif

    public part_t getPart()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPart(null, null);
      return End_getPart(asyncResult);

      #else
      send_getPart();
      return recv_getPart();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPart(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getPart", TMessageType.Call, seqid_));
      getPart_args args = new getPart_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPart()
    {
      oprot_.WriteMessageBegin(new TMessage("getPart", TMessageType.Call, seqid_));
      getPart_args args = new getPart_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public part_t recv_getPart()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPart_result result = new getPart_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPart failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getStatusBits(AsyncCallback callback, object state)
    {
      return send_getStatusBits(callback, state);
    }

    public state_bits End_getStatusBits(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getStatusBits();
    }

    #endif

    public state_bits getStatusBits()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getStatusBits(null, null);
      return End_getStatusBits(asyncResult);

      #else
      send_getStatusBits();
      return recv_getStatusBits();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getStatusBits(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getStatusBits", TMessageType.Call, seqid_));
      getStatusBits_args args = new getStatusBits_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getStatusBits()
    {
      oprot_.WriteMessageBegin(new TMessage("getStatusBits", TMessageType.Call, seqid_));
      getStatusBits_args args = new getStatusBits_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public state_bits recv_getStatusBits()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getStatusBits_result result = new getStatusBits_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getStatusBits failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getInfoDP(AsyncCallback callback, object state)
    {
      return send_getInfoDP(callback, state);
    }

    public info_dp End_getInfoDP(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getInfoDP();
    }

    #endif

    public info_dp getInfoDP()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getInfoDP(null, null);
      return End_getInfoDP(asyncResult);

      #else
      send_getInfoDP();
      return recv_getInfoDP();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getInfoDP(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getInfoDP", TMessageType.Call, seqid_));
      getInfoDP_args args = new getInfoDP_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getInfoDP()
    {
      oprot_.WriteMessageBegin(new TMessage("getInfoDP", TMessageType.Call, seqid_));
      getInfoDP_args args = new getInfoDP_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public info_dp recv_getInfoDP()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getInfoDP_result result = new getInfoDP_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getInfoDP failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setNum(AsyncCallback callback, object state, string part_id, int car_id, string num)
    {
      return send_setNum(callback, state, part_id, car_id, num);
    }

    public bool End_setNum(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setNum();
    }

    #endif

    public bool setNum(string part_id, int car_id, string num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setNum(null, null, part_id, car_id, num);
      return End_setNum(asyncResult);

      #else
      send_setNum(part_id, car_id, num);
      return recv_setNum();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setNum(AsyncCallback callback, object state, string part_id, int car_id, string num)
    {
      oprot_.WriteMessageBegin(new TMessage("setNum", TMessageType.Call, seqid_));
      setNum_args args = new setNum_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setNum(string part_id, int car_id, string num)
    {
      oprot_.WriteMessageBegin(new TMessage("setNum", TMessageType.Call, seqid_));
      setNum_args args = new setNum_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_setNum()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setNum_result result = new setNum_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setNum failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setAtt(AsyncCallback callback, object state, string part_id, int car_id, int att_code)
    {
      return send_setAtt(callback, state, part_id, car_id, att_code);
    }

    public bool End_setAtt(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setAtt();
    }

    #endif

    public bool setAtt(string part_id, int car_id, int att_code)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setAtt(null, null, part_id, car_id, att_code);
      return End_setAtt(asyncResult);

      #else
      send_setAtt(part_id, car_id, att_code);
      return recv_setAtt();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setAtt(AsyncCallback callback, object state, string part_id, int car_id, int att_code)
    {
      oprot_.WriteMessageBegin(new TMessage("setAtt", TMessageType.Call, seqid_));
      setAtt_args args = new setAtt_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Att_code = att_code;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setAtt(string part_id, int car_id, int att_code)
    {
      oprot_.WriteMessageBegin(new TMessage("setAtt", TMessageType.Call, seqid_));
      setAtt_args args = new setAtt_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Att_code = att_code;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_setAtt()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setAtt_result result = new setAtt_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setAtt failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setUser(AsyncCallback callback, object state, string part_id, string user)
    {
      return send_setUser(callback, state, part_id, user);
    }

    public bool End_setUser(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setUser();
    }

    #endif

    public bool setUser(string part_id, string user)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setUser(null, null, part_id, user);
      return End_setUser(asyncResult);

      #else
      send_setUser(part_id, user);
      return recv_setUser();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setUser(AsyncCallback callback, object state, string part_id, string user)
    {
      oprot_.WriteMessageBegin(new TMessage("setUser", TMessageType.Call, seqid_));
      setUser_args args = new setUser_args();
      args.Part_id = part_id;
      args.User = user;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setUser(string part_id, string user)
    {
      oprot_.WriteMessageBegin(new TMessage("setUser", TMessageType.Call, seqid_));
      setUser_args args = new setUser_args();
      args.Part_id = part_id;
      args.User = user;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_setUser()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setUser_result result = new setUser_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setUser failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setTara(AsyncCallback callback, object state, string part_id, int car_id, double tara)
    {
      return send_setTara(callback, state, part_id, car_id, tara);
    }

    public bool End_setTara(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setTara();
    }

    #endif

    public bool setTara(string part_id, int car_id, double tara)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setTara(null, null, part_id, car_id, tara);
      return End_setTara(asyncResult);

      #else
      send_setTara(part_id, car_id, tara);
      return recv_setTara();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setTara(AsyncCallback callback, object state, string part_id, int car_id, double tara)
    {
      oprot_.WriteMessageBegin(new TMessage("setTara", TMessageType.Call, seqid_));
      setTara_args args = new setTara_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Tara = tara;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setTara(string part_id, int car_id, double tara)
    {
      oprot_.WriteMessageBegin(new TMessage("setTara", TMessageType.Call, seqid_));
      setTara_args args = new setTara_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Tara = tara;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_setTara()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setTara_result result = new setTara_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setTara failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setZone(AsyncCallback callback, object state, string part_id, int car_id, int zone)
    {
      return send_setZone(callback, state, part_id, car_id, zone);
    }

    public bool End_setZone(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setZone();
    }

    #endif

    public bool setZone(string part_id, int car_id, int zone)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setZone(null, null, part_id, car_id, zone);
      return End_setZone(asyncResult);

      #else
      send_setZone(part_id, car_id, zone);
      return recv_setZone();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setZone(AsyncCallback callback, object state, string part_id, int car_id, int zone)
    {
      oprot_.WriteMessageBegin(new TMessage("setZone", TMessageType.Call, seqid_));
      setZone_args args = new setZone_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Zone = zone;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setZone(string part_id, int car_id, int zone)
    {
      oprot_.WriteMessageBegin(new TMessage("setZone", TMessageType.Call, seqid_));
      setZone_args args = new setZone_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Zone = zone;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_setZone()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setZone_result result = new setZone_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setZone failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setCarry(AsyncCallback callback, object state, string part_id, int car_id, double carry)
    {
      return send_setCarry(callback, state, part_id, car_id, carry);
    }

    public bool End_setCarry(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setCarry();
    }

    #endif

    public bool setCarry(string part_id, int car_id, double carry)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setCarry(null, null, part_id, car_id, carry);
      return End_setCarry(asyncResult);

      #else
      send_setCarry(part_id, car_id, carry);
      return recv_setCarry();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setCarry(AsyncCallback callback, object state, string part_id, int car_id, double carry)
    {
      oprot_.WriteMessageBegin(new TMessage("setCarry", TMessageType.Call, seqid_));
      setCarry_args args = new setCarry_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Carry = carry;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setCarry(string part_id, int car_id, double carry)
    {
      oprot_.WriteMessageBegin(new TMessage("setCarry", TMessageType.Call, seqid_));
      setCarry_args args = new setCarry_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Carry = carry;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_setCarry()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setCarry_result result = new setCarry_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setCarry failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setShipper(AsyncCallback callback, object state, string part_id, int car_id, int shipper)
    {
      return send_setShipper(callback, state, part_id, car_id, shipper);
    }

    public bool End_setShipper(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setShipper();
    }

    #endif

    public bool setShipper(string part_id, int car_id, int shipper)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setShipper(null, null, part_id, car_id, shipper);
      return End_setShipper(asyncResult);

      #else
      send_setShipper(part_id, car_id, shipper);
      return recv_setShipper();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setShipper(AsyncCallback callback, object state, string part_id, int car_id, int shipper)
    {
      oprot_.WriteMessageBegin(new TMessage("setShipper", TMessageType.Call, seqid_));
      setShipper_args args = new setShipper_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Shipper = shipper;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setShipper(string part_id, int car_id, int shipper)
    {
      oprot_.WriteMessageBegin(new TMessage("setShipper", TMessageType.Call, seqid_));
      setShipper_args args = new setShipper_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Shipper = shipper;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_setShipper()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setShipper_result result = new setShipper_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setShipper failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setConsigner(AsyncCallback callback, object state, string part_id, int car_id, int consigner)
    {
      return send_setConsigner(callback, state, part_id, car_id, consigner);
    }

    public bool End_setConsigner(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setConsigner();
    }

    #endif

    public bool setConsigner(string part_id, int car_id, int consigner)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setConsigner(null, null, part_id, car_id, consigner);
      return End_setConsigner(asyncResult);

      #else
      send_setConsigner(part_id, car_id, consigner);
      return recv_setConsigner();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setConsigner(AsyncCallback callback, object state, string part_id, int car_id, int consigner)
    {
      oprot_.WriteMessageBegin(new TMessage("setConsigner", TMessageType.Call, seqid_));
      setConsigner_args args = new setConsigner_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Consigner = consigner;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setConsigner(string part_id, int car_id, int consigner)
    {
      oprot_.WriteMessageBegin(new TMessage("setConsigner", TMessageType.Call, seqid_));
      setConsigner_args args = new setConsigner_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Consigner = consigner;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_setConsigner()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setConsigner_result result = new setConsigner_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setConsigner failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setMat(AsyncCallback callback, object state, string part_id, int car_id, int mat)
    {
      return send_setMat(callback, state, part_id, car_id, mat);
    }

    public bool End_setMat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setMat();
    }

    #endif

    public bool setMat(string part_id, int car_id, int mat)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setMat(null, null, part_id, car_id, mat);
      return End_setMat(asyncResult);

      #else
      send_setMat(part_id, car_id, mat);
      return recv_setMat();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setMat(AsyncCallback callback, object state, string part_id, int car_id, int mat)
    {
      oprot_.WriteMessageBegin(new TMessage("setMat", TMessageType.Call, seqid_));
      setMat_args args = new setMat_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Mat = mat;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setMat(string part_id, int car_id, int mat)
    {
      oprot_.WriteMessageBegin(new TMessage("setMat", TMessageType.Call, seqid_));
      setMat_args args = new setMat_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Mat = mat;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_setMat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setMat_result result = new setMat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setMat failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setCar(AsyncCallback callback, object state, string part_id, int car_id, car_t car)
    {
      return send_setCar(callback, state, part_id, car_id, car);
    }

    public bool End_setCar(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setCar();
    }

    #endif

    public bool setCar(string part_id, int car_id, car_t car)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setCar(null, null, part_id, car_id, car);
      return End_setCar(asyncResult);

      #else
      send_setCar(part_id, car_id, car);
      return recv_setCar();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setCar(AsyncCallback callback, object state, string part_id, int car_id, car_t car)
    {
      oprot_.WriteMessageBegin(new TMessage("setCar", TMessageType.Call, seqid_));
      setCar_args args = new setCar_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Car = car;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setCar(string part_id, int car_id, car_t car)
    {
      oprot_.WriteMessageBegin(new TMessage("setCar", TMessageType.Call, seqid_));
      setCar_args args = new setCar_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Car = car;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_setCar()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setCar_result result = new setCar_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setCar failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setCause(AsyncCallback callback, object state, string part_id, int car_id, int cause_id)
    {
      return send_setCause(callback, state, part_id, car_id, cause_id);
    }

    public bool End_setCause(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setCause();
    }

    #endif

    public bool setCause(string part_id, int car_id, int cause_id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setCause(null, null, part_id, car_id, cause_id);
      return End_setCause(asyncResult);

      #else
      send_setCause(part_id, car_id, cause_id);
      return recv_setCause();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setCause(AsyncCallback callback, object state, string part_id, int car_id, int cause_id)
    {
      oprot_.WriteMessageBegin(new TMessage("setCause", TMessageType.Call, seqid_));
      setCause_args args = new setCause_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Cause_id = cause_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setCause(string part_id, int car_id, int cause_id)
    {
      oprot_.WriteMessageBegin(new TMessage("setCause", TMessageType.Call, seqid_));
      setCause_args args = new setCause_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Cause_id = cause_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_setCause()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setCause_result result = new setCause_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setCause failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_endAtt(AsyncCallback callback, object state, string userLogin)
    {
      return send_endAtt(callback, state, userLogin);
    }

    public bool End_endAtt(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_endAtt();
    }

    #endif

    public bool endAtt(string userLogin)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_endAtt(null, null, userLogin);
      return End_endAtt(asyncResult);

      #else
      send_endAtt(userLogin);
      return recv_endAtt();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_endAtt(AsyncCallback callback, object state, string userLogin)
    {
      oprot_.WriteMessageBegin(new TMessage("endAtt", TMessageType.Call, seqid_));
      endAtt_args args = new endAtt_args();
      args.UserLogin = userLogin;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_endAtt(string userLogin)
    {
      oprot_.WriteMessageBegin(new TMessage("endAtt", TMessageType.Call, seqid_));
      endAtt_args args = new endAtt_args();
      args.UserLogin = userLogin;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_endAtt()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      endAtt_result result = new endAtt_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "endAtt failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_createTask(AsyncCallback callback, object state, string userLogin, PusherPosition position)
    {
      return send_createTask(callback, state, userLogin, position);
    }

    public string End_createTask(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createTask();
    }

    #endif

    public string createTask(string userLogin, PusherPosition position)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_createTask(null, null, userLogin, position);
      return End_createTask(asyncResult);

      #else
      send_createTask(userLogin, position);
      return recv_createTask();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createTask(AsyncCallback callback, object state, string userLogin, PusherPosition position)
    {
      oprot_.WriteMessageBegin(new TMessage("createTask", TMessageType.Call, seqid_));
      createTask_args args = new createTask_args();
      args.UserLogin = userLogin;
      args.Position = position;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_createTask(string userLogin, PusherPosition position)
    {
      oprot_.WriteMessageBegin(new TMessage("createTask", TMessageType.Call, seqid_));
      createTask_args args = new createTask_args();
      args.UserLogin = userLogin;
      args.Position = position;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_createTask()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createTask_result result = new createTask_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createTask failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_endTask(AsyncCallback callback, object state, string userLogin)
    {
      return send_endTask(callback, state, userLogin);
    }

    public void End_endTask(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_endTask();
    }

    #endif

    public void endTask(string userLogin)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_endTask(null, null, userLogin);
      End_endTask(asyncResult);

      #else
      send_endTask(userLogin);
      recv_endTask();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_endTask(AsyncCallback callback, object state, string userLogin)
    {
      oprot_.WriteMessageBegin(new TMessage("endTask", TMessageType.Call, seqid_));
      endTask_args args = new endTask_args();
      args.UserLogin = userLogin;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_endTask(string userLogin)
    {
      oprot_.WriteMessageBegin(new TMessage("endTask", TMessageType.Call, seqid_));
      endTask_args args = new endTask_args();
      args.UserLogin = userLogin;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_endTask()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      endTask_result result = new endTask_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ex) {
        throw result.Ex;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_removeTask(AsyncCallback callback, object state, string userLogin)
    {
      return send_removeTask(callback, state, userLogin);
    }

    public void End_removeTask(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_removeTask();
    }

    #endif

    public void removeTask(string userLogin)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_removeTask(null, null, userLogin);
      End_removeTask(asyncResult);

      #else
      send_removeTask(userLogin);
      recv_removeTask();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_removeTask(AsyncCallback callback, object state, string userLogin)
    {
      oprot_.WriteMessageBegin(new TMessage("removeTask", TMessageType.Call, seqid_));
      removeTask_args args = new removeTask_args();
      args.UserLogin = userLogin;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_removeTask(string userLogin)
    {
      oprot_.WriteMessageBegin(new TMessage("removeTask", TMessageType.Call, seqid_));
      removeTask_args args = new removeTask_args();
      args.UserLogin = userLogin;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_removeTask()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      removeTask_result result = new removeTask_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ex) {
        throw result.Ex;
      }
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["getCauses"] = getCauses_Process;
      processMap_["getContractors"] = getContractors_Process;
      processMap_["getMat"] = getMat_Process;
      processMap_["getPhoto"] = getPhoto_Process;
      processMap_["getPart"] = getPart_Process;
      processMap_["getStatusBits"] = getStatusBits_Process;
      processMap_["getInfoDP"] = getInfoDP_Process;
      processMap_["setNum"] = setNum_Process;
      processMap_["setAtt"] = setAtt_Process;
      processMap_["setUser"] = setUser_Process;
      processMap_["setTara"] = setTara_Process;
      processMap_["setZone"] = setZone_Process;
      processMap_["setCarry"] = setCarry_Process;
      processMap_["setShipper"] = setShipper_Process;
      processMap_["setConsigner"] = setConsigner_Process;
      processMap_["setMat"] = setMat_Process;
      processMap_["setCar"] = setCar_Process;
      processMap_["setCause"] = setCause_Process;
      processMap_["endAtt"] = endAtt_Process;
      processMap_["createTask"] = createTask_Process;
      processMap_["endTask"] = endTask_Process;
      processMap_["removeTask"] = removeTask_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getCauses_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCauses_args args = new getCauses_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCauses_result result = new getCauses_result();
      try
      {
        try
        {
          result.Success = iface_.getCauses();
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getCauses", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCauses", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getContractors_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getContractors_args args = new getContractors_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getContractors_result result = new getContractors_result();
      try
      {
        try
        {
          result.Success = iface_.getContractors();
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getContractors", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getContractors", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMat_args args = new getMat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMat_result result = new getMat_result();
      try
      {
        try
        {
          result.Success = iface_.getMat();
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getMat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMat", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPhoto_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPhoto_args args = new getPhoto_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPhoto_result result = new getPhoto_result();
      try
      {
        try
        {
          result.Success = iface_.getPhoto(args.Part_id, args.Car_id);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getPhoto", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPhoto", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPart_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPart_args args = new getPart_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPart_result result = new getPart_result();
      try
      {
        try
        {
          result.Success = iface_.getPart();
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getPart", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPart", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getStatusBits_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getStatusBits_args args = new getStatusBits_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getStatusBits_result result = new getStatusBits_result();
      try
      {
        try
        {
          result.Success = iface_.getStatusBits();
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getStatusBits", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getStatusBits", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getInfoDP_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getInfoDP_args args = new getInfoDP_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getInfoDP_result result = new getInfoDP_result();
      try
      {
        try
        {
          result.Success = iface_.getInfoDP();
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getInfoDP", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getInfoDP", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setNum_args args = new setNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setNum_result result = new setNum_result();
      try
      {
        try
        {
          result.Success = iface_.setNum(args.Part_id, args.Car_id, args.Num);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("setNum", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setNum", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setAtt_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setAtt_args args = new setAtt_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setAtt_result result = new setAtt_result();
      try
      {
        try
        {
          result.Success = iface_.setAtt(args.Part_id, args.Car_id, args.Att_code);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("setAtt", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setAtt", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setUser_args args = new setUser_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setUser_result result = new setUser_result();
      try
      {
        try
        {
          result.Success = iface_.setUser(args.Part_id, args.User);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("setUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setUser", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setTara_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setTara_args args = new setTara_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setTara_result result = new setTara_result();
      try
      {
        try
        {
          result.Success = iface_.setTara(args.Part_id, args.Car_id, args.Tara);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("setTara", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setTara", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setZone_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setZone_args args = new setZone_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setZone_result result = new setZone_result();
      try
      {
        try
        {
          result.Success = iface_.setZone(args.Part_id, args.Car_id, args.Zone);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("setZone", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setZone", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setCarry_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setCarry_args args = new setCarry_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setCarry_result result = new setCarry_result();
      try
      {
        try
        {
          result.Success = iface_.setCarry(args.Part_id, args.Car_id, args.Carry);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("setCarry", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setCarry", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setShipper_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setShipper_args args = new setShipper_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setShipper_result result = new setShipper_result();
      try
      {
        try
        {
          result.Success = iface_.setShipper(args.Part_id, args.Car_id, args.Shipper);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("setShipper", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setShipper", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setConsigner_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setConsigner_args args = new setConsigner_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setConsigner_result result = new setConsigner_result();
      try
      {
        try
        {
          result.Success = iface_.setConsigner(args.Part_id, args.Car_id, args.Consigner);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("setConsigner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setConsigner", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setMat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setMat_args args = new setMat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setMat_result result = new setMat_result();
      try
      {
        try
        {
          result.Success = iface_.setMat(args.Part_id, args.Car_id, args.Mat);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("setMat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setMat", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setCar_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setCar_args args = new setCar_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setCar_result result = new setCar_result();
      try
      {
        try
        {
          result.Success = iface_.setCar(args.Part_id, args.Car_id, args.Car);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("setCar", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setCar", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setCause_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setCause_args args = new setCause_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setCause_result result = new setCause_result();
      try
      {
        try
        {
          result.Success = iface_.setCause(args.Part_id, args.Car_id, args.Cause_id);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("setCause", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setCause", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void endAtt_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      endAtt_args args = new endAtt_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      endAtt_result result = new endAtt_result();
      try
      {
        try
        {
          result.Success = iface_.endAtt(args.UserLogin);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("endAtt", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("endAtt", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createTask_args args = new createTask_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createTask_result result = new createTask_result();
      try
      {
        try
        {
          result.Success = iface_.createTask(args.UserLogin, args.Position);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("createTask", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createTask", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void endTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      endTask_args args = new endTask_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      endTask_result result = new endTask_result();
      try
      {
        try
        {
          iface_.endTask(args.UserLogin);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("endTask", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("endTask", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void removeTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      removeTask_args args = new removeTask_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      removeTask_result result = new removeTask_result();
      try
      {
        try
        {
          iface_.removeTask(args.UserLogin);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("removeTask", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("removeTask", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCauses_args : TBase
  {

    public getCauses_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCauses_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCauses_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCauses_result : TBase
  {
    private List<cause_t> _success;
    private DataProviderException _ex;

    public List<cause_t> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getCauses_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<cause_t>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    cause_t _elem6;
                    _elem6 = new cause_t();
                    _elem6.Read(iprot);
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCauses_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (cause_t _iter7 in Success)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCauses_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getContractors_args : TBase
  {

    public getContractors_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getContractors_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getContractors_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getContractors_result : TBase
  {
    private List<contractor_t> _success;
    private DataProviderException _ex;

    public List<contractor_t> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getContractors_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<contractor_t>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    contractor_t _elem10;
                    _elem10 = new contractor_t();
                    _elem10.Read(iprot);
                    Success.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getContractors_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (contractor_t _iter11 in Success)
              {
                _iter11.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getContractors_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMat_args : TBase
  {

    public getMat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMat_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMat_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMat_result : TBase
  {
    private List<mat_t> _success;
    private DataProviderException _ex;

    public List<mat_t> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getMat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<mat_t>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    mat_t _elem14;
                    _elem14 = new mat_t();
                    _elem14.Read(iprot);
                    Success.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (mat_t _iter15 in Success)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMat_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPhoto_args : TBase
  {
    private string _part_id;
    private int _car_id;

    public string Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
    }

    public getPhoto_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Part_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPhoto_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Part_id != null && __isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPhoto_args(");
      bool __first = true;
      if (Part_id != null && __isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPhoto_result : TBase
  {
    private photo_t _success;
    private DataProviderException _ex;

    public photo_t Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getPhoto_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new photo_t();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPhoto_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPhoto_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPart_args : TBase
  {

    public getPart_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPart_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPart_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPart_result : TBase
  {
    private part_t _success;
    private DataProviderException _ex;

    public part_t Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getPart_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new part_t();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPart_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPart_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getStatusBits_args : TBase
  {

    public getStatusBits_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getStatusBits_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getStatusBits_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getStatusBits_result : TBase
  {
    private state_bits _success;
    private DataProviderException _ex;

    public state_bits Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getStatusBits_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new state_bits();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getStatusBits_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getStatusBits_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getInfoDP_args : TBase
  {

    public getInfoDP_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getInfoDP_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getInfoDP_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getInfoDP_result : TBase
  {
    private info_dp _success;
    private DataProviderException _ex;

    public info_dp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getInfoDP_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new info_dp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getInfoDP_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getInfoDP_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setNum_args : TBase
  {
    private string _part_id;
    private int _car_id;
    private string _num;

    public string Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }

    public string Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
      public bool num;
    }

    public setNum_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Part_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Num = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setNum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Part_id != null && __isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        if (Num != null && __isset.num) {
          field.Name = "num";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setNum_args(");
      bool __first = true;
      if (Part_id != null && __isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      if (Num != null && __isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setNum_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public setNum_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setNum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setNum_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setAtt_args : TBase
  {
    private string _part_id;
    private int _car_id;
    private int _att_code;

    public string Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }

    public int Att_code
    {
      get
      {
        return _att_code;
      }
      set
      {
        __isset.att_code = true;
        this._att_code = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
      public bool att_code;
    }

    public setAtt_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Part_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Att_code = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setAtt_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Part_id != null && __isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.att_code) {
          field.Name = "att_code";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Att_code);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setAtt_args(");
      bool __first = true;
      if (Part_id != null && __isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      if (__isset.att_code) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Att_code: ");
        __sb.Append(Att_code);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setAtt_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public setAtt_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setAtt_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setAtt_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setUser_args : TBase
  {
    private string _part_id;
    private string _user;

    public string Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public string User
    {
      get
      {
        return _user;
      }
      set
      {
        __isset.user = true;
        this._user = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool user;
    }

    public setUser_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Part_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                User = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Part_id != null && __isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_id);
          oprot.WriteFieldEnd();
        }
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setUser_args(");
      bool __first = true;
      if (Part_id != null && __isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (User != null && __isset.user) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("User: ");
        __sb.Append(User);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setUser_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public setUser_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setUser_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setTara_args : TBase
  {
    private string _part_id;
    private int _car_id;
    private double _tara;

    public string Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }

    public double Tara
    {
      get
      {
        return _tara;
      }
      set
      {
        __isset.tara = true;
        this._tara = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
      public bool tara;
    }

    public setTara_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Part_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                Tara = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setTara_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Part_id != null && __isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.tara) {
          field.Name = "tara";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Tara);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setTara_args(");
      bool __first = true;
      if (Part_id != null && __isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      if (__isset.tara) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tara: ");
        __sb.Append(Tara);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setTara_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public setTara_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setTara_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setTara_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setZone_args : TBase
  {
    private string _part_id;
    private int _car_id;
    private int _zone;

    public string Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }

    public int Zone
    {
      get
      {
        return _zone;
      }
      set
      {
        __isset.zone = true;
        this._zone = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
      public bool zone;
    }

    public setZone_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Part_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Zone = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setZone_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Part_id != null && __isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.zone) {
          field.Name = "zone";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Zone);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setZone_args(");
      bool __first = true;
      if (Part_id != null && __isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      if (__isset.zone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Zone: ");
        __sb.Append(Zone);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setZone_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public setZone_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setZone_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setZone_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setCarry_args : TBase
  {
    private string _part_id;
    private int _car_id;
    private double _carry;

    public string Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }

    public double Carry
    {
      get
      {
        return _carry;
      }
      set
      {
        __isset.carry = true;
        this._carry = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
      public bool carry;
    }

    public setCarry_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Part_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                Carry = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setCarry_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Part_id != null && __isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.carry) {
          field.Name = "carry";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Carry);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setCarry_args(");
      bool __first = true;
      if (Part_id != null && __isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      if (__isset.carry) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Carry: ");
        __sb.Append(Carry);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setCarry_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public setCarry_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setCarry_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setCarry_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setShipper_args : TBase
  {
    private string _part_id;
    private int _car_id;
    private int _shipper;

    public string Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }

    public int Shipper
    {
      get
      {
        return _shipper;
      }
      set
      {
        __isset.shipper = true;
        this._shipper = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
      public bool shipper;
    }

    public setShipper_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Part_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Shipper = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setShipper_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Part_id != null && __isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.shipper) {
          field.Name = "shipper";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Shipper);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setShipper_args(");
      bool __first = true;
      if (Part_id != null && __isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      if (__isset.shipper) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Shipper: ");
        __sb.Append(Shipper);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setShipper_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public setShipper_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setShipper_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setShipper_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setConsigner_args : TBase
  {
    private string _part_id;
    private int _car_id;
    private int _consigner;

    public string Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }

    public int Consigner
    {
      get
      {
        return _consigner;
      }
      set
      {
        __isset.consigner = true;
        this._consigner = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
      public bool consigner;
    }

    public setConsigner_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Part_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Consigner = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setConsigner_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Part_id != null && __isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.consigner) {
          field.Name = "consigner";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Consigner);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setConsigner_args(");
      bool __first = true;
      if (Part_id != null && __isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      if (__isset.consigner) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Consigner: ");
        __sb.Append(Consigner);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setConsigner_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public setConsigner_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setConsigner_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setConsigner_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setMat_args : TBase
  {
    private string _part_id;
    private int _car_id;
    private int _mat;

    public string Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }

    public int Mat
    {
      get
      {
        return _mat;
      }
      set
      {
        __isset.mat = true;
        this._mat = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
      public bool mat;
    }

    public setMat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Part_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Mat = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setMat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Part_id != null && __isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.mat) {
          field.Name = "mat";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Mat);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setMat_args(");
      bool __first = true;
      if (Part_id != null && __isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      if (__isset.mat) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mat: ");
        __sb.Append(Mat);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setMat_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public setMat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setMat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setMat_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setCar_args : TBase
  {
    private string _part_id;
    private int _car_id;
    private car_t _car;

    public string Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }

    public car_t Car
    {
      get
      {
        return _car;
      }
      set
      {
        __isset.car = true;
        this._car = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
      public bool car;
    }

    public setCar_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Part_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Car = new car_t();
                Car.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setCar_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Part_id != null && __isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        if (Car != null && __isset.car) {
          field.Name = "car";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Car.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setCar_args(");
      bool __first = true;
      if (Part_id != null && __isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      if (Car != null && __isset.car) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car: ");
        __sb.Append(Car== null ? "<null>" : Car.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setCar_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public setCar_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setCar_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setCar_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setCause_args : TBase
  {
    private string _part_id;
    private int _car_id;
    private int _cause_id;

    public string Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }

    public int Cause_id
    {
      get
      {
        return _cause_id;
      }
      set
      {
        __isset.cause_id = true;
        this._cause_id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
      public bool cause_id;
    }

    public setCause_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Part_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Cause_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setCause_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Part_id != null && __isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.cause_id) {
          field.Name = "cause_id";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Cause_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setCause_args(");
      bool __first = true;
      if (Part_id != null && __isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      if (__isset.cause_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cause_id: ");
        __sb.Append(Cause_id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setCause_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public setCause_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setCause_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setCause_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class endAtt_args : TBase
  {
    private string _userLogin;

    public string UserLogin
    {
      get
      {
        return _userLogin;
      }
      set
      {
        __isset.userLogin = true;
        this._userLogin = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userLogin;
    }

    public endAtt_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("endAtt_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserLogin != null && __isset.userLogin) {
          field.Name = "userLogin";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("endAtt_args(");
      bool __first = true;
      if (UserLogin != null && __isset.userLogin) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserLogin: ");
        __sb.Append(UserLogin);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class endAtt_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public endAtt_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("endAtt_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("endAtt_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createTask_args : TBase
  {
    private string _userLogin;
    private PusherPosition _position;

    public string UserLogin
    {
      get
      {
        return _userLogin;
      }
      set
      {
        __isset.userLogin = true;
        this._userLogin = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="PusherPosition"/>
    /// </summary>
    public PusherPosition Position
    {
      get
      {
        return _position;
      }
      set
      {
        __isset.position = true;
        this._position = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userLogin;
      public bool position;
    }

    public createTask_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Position = (PusherPosition)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createTask_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserLogin != null && __isset.userLogin) {
          field.Name = "userLogin";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserLogin);
          oprot.WriteFieldEnd();
        }
        if (__isset.position) {
          field.Name = "position";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Position);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createTask_args(");
      bool __first = true;
      if (UserLogin != null && __isset.userLogin) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserLogin: ");
        __sb.Append(UserLogin);
      }
      if (__isset.position) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Position: ");
        __sb.Append(Position);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createTask_result : TBase
  {
    private string _success;
    private DataProviderException _ex;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public createTask_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createTask_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createTask_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class endTask_args : TBase
  {
    private string _userLogin;

    public string UserLogin
    {
      get
      {
        return _userLogin;
      }
      set
      {
        __isset.userLogin = true;
        this._userLogin = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userLogin;
    }

    public endTask_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("endTask_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserLogin != null && __isset.userLogin) {
          field.Name = "userLogin";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("endTask_args(");
      bool __first = true;
      if (UserLogin != null && __isset.userLogin) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserLogin: ");
        __sb.Append(UserLogin);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class endTask_result : TBase
  {
    private DataProviderException _ex;

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ex;
    }

    public endTask_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("endTask_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("endTask_result(");
      bool __first = true;
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeTask_args : TBase
  {
    private string _userLogin;

    public string UserLogin
    {
      get
      {
        return _userLogin;
      }
      set
      {
        __isset.userLogin = true;
        this._userLogin = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userLogin;
    }

    public removeTask_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeTask_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserLogin != null && __isset.userLogin) {
          field.Name = "userLogin";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeTask_args(");
      bool __first = true;
      if (UserLogin != null && __isset.userLogin) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserLogin: ");
        __sb.Append(UserLogin);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeTask_result : TBase
  {
    private DataProviderException _ex;

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ex;
    }

    public removeTask_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeTask_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeTask_result(");
      bool __first = true;
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
