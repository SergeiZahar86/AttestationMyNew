/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.indas.att.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-25")
public class car_t implements org.apache.thrift.TBase<car_t, car_t._Fields>, java.io.Serializable, Cloneable, Comparable<car_t> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("car_t");

  private static final org.apache.thrift.protocol.TField PART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("part_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("car_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SHIPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("shipper", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CONSIGNER_FIELD_DESC = new org.apache.thrift.protocol.TField("consigner", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MAT_FIELD_DESC = new org.apache.thrift.protocol.TField("mat", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ATT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("att_code", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TARA_FIELD_DESC = new org.apache.thrift.protocol.TField("tara", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField TARA_E_FIELD_DESC = new org.apache.thrift.protocol.TField("tara_e", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField ZONE_E_FIELD_DESC = new org.apache.thrift.protocol.TField("zone_e", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CAUSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cause_id", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CARRYING_E_FIELD_DESC = new org.apache.thrift.protocol.TField("carrying_e", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField ATT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("att_time", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new car_tStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new car_tTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String part_id; // required
  public int car_id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String num; // required
  public int shipper; // required
  public int consigner; // required
  public int mat; // required
  public int att_code; // required
  public double tara; // required
  public double tara_e; // required
  public int zone_e; // required
  public int cause_id; // required
  public double carrying_e; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String att_time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PART_ID((short)1, "part_id"),
    CAR_ID((short)2, "car_id"),
    NUM((short)3, "num"),
    SHIPPER((short)4, "shipper"),
    CONSIGNER((short)5, "consigner"),
    MAT((short)6, "mat"),
    ATT_CODE((short)7, "att_code"),
    TARA((short)8, "tara"),
    TARA_E((short)9, "tara_e"),
    ZONE_E((short)10, "zone_e"),
    CAUSE_ID((short)11, "cause_id"),
    CARRYING_E((short)12, "carrying_e"),
    ATT_TIME((short)13, "att_time");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PART_ID
          return PART_ID;
        case 2: // CAR_ID
          return CAR_ID;
        case 3: // NUM
          return NUM;
        case 4: // SHIPPER
          return SHIPPER;
        case 5: // CONSIGNER
          return CONSIGNER;
        case 6: // MAT
          return MAT;
        case 7: // ATT_CODE
          return ATT_CODE;
        case 8: // TARA
          return TARA;
        case 9: // TARA_E
          return TARA_E;
        case 10: // ZONE_E
          return ZONE_E;
        case 11: // CAUSE_ID
          return CAUSE_ID;
        case 12: // CARRYING_E
          return CARRYING_E;
        case 13: // ATT_TIME
          return ATT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CAR_ID_ISSET_ID = 0;
  private static final int __SHIPPER_ISSET_ID = 1;
  private static final int __CONSIGNER_ISSET_ID = 2;
  private static final int __MAT_ISSET_ID = 3;
  private static final int __ATT_CODE_ISSET_ID = 4;
  private static final int __TARA_ISSET_ID = 5;
  private static final int __TARA_E_ISSET_ID = 6;
  private static final int __ZONE_E_ISSET_ID = 7;
  private static final int __CAUSE_ID_ISSET_ID = 8;
  private static final int __CARRYING_E_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PART_ID, new org.apache.thrift.meta_data.FieldMetaData("part_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAR_ID, new org.apache.thrift.meta_data.FieldMetaData("car_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHIPPER, new org.apache.thrift.meta_data.FieldMetaData("shipper", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.CONSIGNER, new org.apache.thrift.meta_data.FieldMetaData("consigner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.MAT, new org.apache.thrift.meta_data.FieldMetaData("mat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ATT_CODE, new org.apache.thrift.meta_data.FieldMetaData("att_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.TARA, new org.apache.thrift.meta_data.FieldMetaData("tara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TARA_E, new org.apache.thrift.meta_data.FieldMetaData("tara_e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ZONE_E, new org.apache.thrift.meta_data.FieldMetaData("zone_e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.CAUSE_ID, new org.apache.thrift.meta_data.FieldMetaData("cause_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.CARRYING_E, new org.apache.thrift.meta_data.FieldMetaData("carrying_e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ATT_TIME, new org.apache.thrift.meta_data.FieldMetaData("att_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(car_t.class, metaDataMap);
  }

  public car_t() {
  }

  public car_t(
    java.lang.String part_id,
    int car_id,
    java.lang.String num,
    int shipper,
    int consigner,
    int mat,
    int att_code,
    double tara,
    double tara_e,
    int zone_e,
    int cause_id,
    double carrying_e,
    java.lang.String att_time)
  {
    this();
    this.part_id = part_id;
    this.car_id = car_id;
    setCar_idIsSet(true);
    this.num = num;
    this.shipper = shipper;
    setShipperIsSet(true);
    this.consigner = consigner;
    setConsignerIsSet(true);
    this.mat = mat;
    setMatIsSet(true);
    this.att_code = att_code;
    setAtt_codeIsSet(true);
    this.tara = tara;
    setTaraIsSet(true);
    this.tara_e = tara_e;
    setTara_eIsSet(true);
    this.zone_e = zone_e;
    setZone_eIsSet(true);
    this.cause_id = cause_id;
    setCause_idIsSet(true);
    this.carrying_e = carrying_e;
    setCarrying_eIsSet(true);
    this.att_time = att_time;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public car_t(car_t other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPart_id()) {
      this.part_id = other.part_id;
    }
    this.car_id = other.car_id;
    if (other.isSetNum()) {
      this.num = other.num;
    }
    this.shipper = other.shipper;
    this.consigner = other.consigner;
    this.mat = other.mat;
    this.att_code = other.att_code;
    this.tara = other.tara;
    this.tara_e = other.tara_e;
    this.zone_e = other.zone_e;
    this.cause_id = other.cause_id;
    this.carrying_e = other.carrying_e;
    if (other.isSetAtt_time()) {
      this.att_time = other.att_time;
    }
  }

  public car_t deepCopy() {
    return new car_t(this);
  }

  @Override
  public void clear() {
    this.part_id = null;
    setCar_idIsSet(false);
    this.car_id = 0;
    this.num = null;
    setShipperIsSet(false);
    this.shipper = 0;
    setConsignerIsSet(false);
    this.consigner = 0;
    setMatIsSet(false);
    this.mat = 0;
    setAtt_codeIsSet(false);
    this.att_code = 0;
    setTaraIsSet(false);
    this.tara = 0.0;
    setTara_eIsSet(false);
    this.tara_e = 0.0;
    setZone_eIsSet(false);
    this.zone_e = 0;
    setCause_idIsSet(false);
    this.cause_id = 0;
    setCarrying_eIsSet(false);
    this.carrying_e = 0.0;
    this.att_time = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPart_id() {
    return this.part_id;
  }

  public car_t setPart_id(@org.apache.thrift.annotation.Nullable java.lang.String part_id) {
    this.part_id = part_id;
    return this;
  }

  public void unsetPart_id() {
    this.part_id = null;
  }

  /** Returns true if field part_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPart_id() {
    return this.part_id != null;
  }

  public void setPart_idIsSet(boolean value) {
    if (!value) {
      this.part_id = null;
    }
  }

  public int getCar_id() {
    return this.car_id;
  }

  public car_t setCar_id(int car_id) {
    this.car_id = car_id;
    setCar_idIsSet(true);
    return this;
  }

  public void unsetCar_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAR_ID_ISSET_ID);
  }

  /** Returns true if field car_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCar_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAR_ID_ISSET_ID);
  }

  public void setCar_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAR_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNum() {
    return this.num;
  }

  public car_t setNum(@org.apache.thrift.annotation.Nullable java.lang.String num) {
    this.num = num;
    return this;
  }

  public void unsetNum() {
    this.num = null;
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return this.num != null;
  }

  public void setNumIsSet(boolean value) {
    if (!value) {
      this.num = null;
    }
  }

  public int getShipper() {
    return this.shipper;
  }

  public car_t setShipper(int shipper) {
    this.shipper = shipper;
    setShipperIsSet(true);
    return this;
  }

  public void unsetShipper() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHIPPER_ISSET_ID);
  }

  /** Returns true if field shipper is set (has been assigned a value) and false otherwise */
  public boolean isSetShipper() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHIPPER_ISSET_ID);
  }

  public void setShipperIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHIPPER_ISSET_ID, value);
  }

  public int getConsigner() {
    return this.consigner;
  }

  public car_t setConsigner(int consigner) {
    this.consigner = consigner;
    setConsignerIsSet(true);
    return this;
  }

  public void unsetConsigner() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONSIGNER_ISSET_ID);
  }

  /** Returns true if field consigner is set (has been assigned a value) and false otherwise */
  public boolean isSetConsigner() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONSIGNER_ISSET_ID);
  }

  public void setConsignerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONSIGNER_ISSET_ID, value);
  }

  public int getMat() {
    return this.mat;
  }

  public car_t setMat(int mat) {
    this.mat = mat;
    setMatIsSet(true);
    return this;
  }

  public void unsetMat() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAT_ISSET_ID);
  }

  /** Returns true if field mat is set (has been assigned a value) and false otherwise */
  public boolean isSetMat() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAT_ISSET_ID);
  }

  public void setMatIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAT_ISSET_ID, value);
  }

  public int getAtt_code() {
    return this.att_code;
  }

  public car_t setAtt_code(int att_code) {
    this.att_code = att_code;
    setAtt_codeIsSet(true);
    return this;
  }

  public void unsetAtt_code() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ATT_CODE_ISSET_ID);
  }

  /** Returns true if field att_code is set (has been assigned a value) and false otherwise */
  public boolean isSetAtt_code() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ATT_CODE_ISSET_ID);
  }

  public void setAtt_codeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ATT_CODE_ISSET_ID, value);
  }

  public double getTara() {
    return this.tara;
  }

  public car_t setTara(double tara) {
    this.tara = tara;
    setTaraIsSet(true);
    return this;
  }

  public void unsetTara() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARA_ISSET_ID);
  }

  /** Returns true if field tara is set (has been assigned a value) and false otherwise */
  public boolean isSetTara() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARA_ISSET_ID);
  }

  public void setTaraIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARA_ISSET_ID, value);
  }

  public double getTara_e() {
    return this.tara_e;
  }

  public car_t setTara_e(double tara_e) {
    this.tara_e = tara_e;
    setTara_eIsSet(true);
    return this;
  }

  public void unsetTara_e() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARA_E_ISSET_ID);
  }

  /** Returns true if field tara_e is set (has been assigned a value) and false otherwise */
  public boolean isSetTara_e() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARA_E_ISSET_ID);
  }

  public void setTara_eIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARA_E_ISSET_ID, value);
  }

  public int getZone_e() {
    return this.zone_e;
  }

  public car_t setZone_e(int zone_e) {
    this.zone_e = zone_e;
    setZone_eIsSet(true);
    return this;
  }

  public void unsetZone_e() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ZONE_E_ISSET_ID);
  }

  /** Returns true if field zone_e is set (has been assigned a value) and false otherwise */
  public boolean isSetZone_e() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ZONE_E_ISSET_ID);
  }

  public void setZone_eIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ZONE_E_ISSET_ID, value);
  }

  public int getCause_id() {
    return this.cause_id;
  }

  public car_t setCause_id(int cause_id) {
    this.cause_id = cause_id;
    setCause_idIsSet(true);
    return this;
  }

  public void unsetCause_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAUSE_ID_ISSET_ID);
  }

  /** Returns true if field cause_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCause_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAUSE_ID_ISSET_ID);
  }

  public void setCause_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAUSE_ID_ISSET_ID, value);
  }

  public double getCarrying_e() {
    return this.carrying_e;
  }

  public car_t setCarrying_e(double carrying_e) {
    this.carrying_e = carrying_e;
    setCarrying_eIsSet(true);
    return this;
  }

  public void unsetCarrying_e() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CARRYING_E_ISSET_ID);
  }

  /** Returns true if field carrying_e is set (has been assigned a value) and false otherwise */
  public boolean isSetCarrying_e() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CARRYING_E_ISSET_ID);
  }

  public void setCarrying_eIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CARRYING_E_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAtt_time() {
    return this.att_time;
  }

  public car_t setAtt_time(@org.apache.thrift.annotation.Nullable java.lang.String att_time) {
    this.att_time = att_time;
    return this;
  }

  public void unsetAtt_time() {
    this.att_time = null;
  }

  /** Returns true if field att_time is set (has been assigned a value) and false otherwise */
  public boolean isSetAtt_time() {
    return this.att_time != null;
  }

  public void setAtt_timeIsSet(boolean value) {
    if (!value) {
      this.att_time = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PART_ID:
      if (value == null) {
        unsetPart_id();
      } else {
        setPart_id((java.lang.String)value);
      }
      break;

    case CAR_ID:
      if (value == null) {
        unsetCar_id();
      } else {
        setCar_id((java.lang.Integer)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((java.lang.String)value);
      }
      break;

    case SHIPPER:
      if (value == null) {
        unsetShipper();
      } else {
        setShipper((java.lang.Integer)value);
      }
      break;

    case CONSIGNER:
      if (value == null) {
        unsetConsigner();
      } else {
        setConsigner((java.lang.Integer)value);
      }
      break;

    case MAT:
      if (value == null) {
        unsetMat();
      } else {
        setMat((java.lang.Integer)value);
      }
      break;

    case ATT_CODE:
      if (value == null) {
        unsetAtt_code();
      } else {
        setAtt_code((java.lang.Integer)value);
      }
      break;

    case TARA:
      if (value == null) {
        unsetTara();
      } else {
        setTara((java.lang.Double)value);
      }
      break;

    case TARA_E:
      if (value == null) {
        unsetTara_e();
      } else {
        setTara_e((java.lang.Double)value);
      }
      break;

    case ZONE_E:
      if (value == null) {
        unsetZone_e();
      } else {
        setZone_e((java.lang.Integer)value);
      }
      break;

    case CAUSE_ID:
      if (value == null) {
        unsetCause_id();
      } else {
        setCause_id((java.lang.Integer)value);
      }
      break;

    case CARRYING_E:
      if (value == null) {
        unsetCarrying_e();
      } else {
        setCarrying_e((java.lang.Double)value);
      }
      break;

    case ATT_TIME:
      if (value == null) {
        unsetAtt_time();
      } else {
        setAtt_time((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PART_ID:
      return getPart_id();

    case CAR_ID:
      return getCar_id();

    case NUM:
      return getNum();

    case SHIPPER:
      return getShipper();

    case CONSIGNER:
      return getConsigner();

    case MAT:
      return getMat();

    case ATT_CODE:
      return getAtt_code();

    case TARA:
      return getTara();

    case TARA_E:
      return getTara_e();

    case ZONE_E:
      return getZone_e();

    case CAUSE_ID:
      return getCause_id();

    case CARRYING_E:
      return getCarrying_e();

    case ATT_TIME:
      return getAtt_time();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PART_ID:
      return isSetPart_id();
    case CAR_ID:
      return isSetCar_id();
    case NUM:
      return isSetNum();
    case SHIPPER:
      return isSetShipper();
    case CONSIGNER:
      return isSetConsigner();
    case MAT:
      return isSetMat();
    case ATT_CODE:
      return isSetAtt_code();
    case TARA:
      return isSetTara();
    case TARA_E:
      return isSetTara_e();
    case ZONE_E:
      return isSetZone_e();
    case CAUSE_ID:
      return isSetCause_id();
    case CARRYING_E:
      return isSetCarrying_e();
    case ATT_TIME:
      return isSetAtt_time();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof car_t)
      return this.equals((car_t)that);
    return false;
  }

  public boolean equals(car_t that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_part_id = true && this.isSetPart_id();
    boolean that_present_part_id = true && that.isSetPart_id();
    if (this_present_part_id || that_present_part_id) {
      if (!(this_present_part_id && that_present_part_id))
        return false;
      if (!this.part_id.equals(that.part_id))
        return false;
    }

    boolean this_present_car_id = true;
    boolean that_present_car_id = true;
    if (this_present_car_id || that_present_car_id) {
      if (!(this_present_car_id && that_present_car_id))
        return false;
      if (this.car_id != that.car_id)
        return false;
    }

    boolean this_present_num = true && this.isSetNum();
    boolean that_present_num = true && that.isSetNum();
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (!this.num.equals(that.num))
        return false;
    }

    boolean this_present_shipper = true;
    boolean that_present_shipper = true;
    if (this_present_shipper || that_present_shipper) {
      if (!(this_present_shipper && that_present_shipper))
        return false;
      if (this.shipper != that.shipper)
        return false;
    }

    boolean this_present_consigner = true;
    boolean that_present_consigner = true;
    if (this_present_consigner || that_present_consigner) {
      if (!(this_present_consigner && that_present_consigner))
        return false;
      if (this.consigner != that.consigner)
        return false;
    }

    boolean this_present_mat = true;
    boolean that_present_mat = true;
    if (this_present_mat || that_present_mat) {
      if (!(this_present_mat && that_present_mat))
        return false;
      if (this.mat != that.mat)
        return false;
    }

    boolean this_present_att_code = true;
    boolean that_present_att_code = true;
    if (this_present_att_code || that_present_att_code) {
      if (!(this_present_att_code && that_present_att_code))
        return false;
      if (this.att_code != that.att_code)
        return false;
    }

    boolean this_present_tara = true;
    boolean that_present_tara = true;
    if (this_present_tara || that_present_tara) {
      if (!(this_present_tara && that_present_tara))
        return false;
      if (this.tara != that.tara)
        return false;
    }

    boolean this_present_tara_e = true;
    boolean that_present_tara_e = true;
    if (this_present_tara_e || that_present_tara_e) {
      if (!(this_present_tara_e && that_present_tara_e))
        return false;
      if (this.tara_e != that.tara_e)
        return false;
    }

    boolean this_present_zone_e = true;
    boolean that_present_zone_e = true;
    if (this_present_zone_e || that_present_zone_e) {
      if (!(this_present_zone_e && that_present_zone_e))
        return false;
      if (this.zone_e != that.zone_e)
        return false;
    }

    boolean this_present_cause_id = true;
    boolean that_present_cause_id = true;
    if (this_present_cause_id || that_present_cause_id) {
      if (!(this_present_cause_id && that_present_cause_id))
        return false;
      if (this.cause_id != that.cause_id)
        return false;
    }

    boolean this_present_carrying_e = true;
    boolean that_present_carrying_e = true;
    if (this_present_carrying_e || that_present_carrying_e) {
      if (!(this_present_carrying_e && that_present_carrying_e))
        return false;
      if (this.carrying_e != that.carrying_e)
        return false;
    }

    boolean this_present_att_time = true && this.isSetAtt_time();
    boolean that_present_att_time = true && that.isSetAtt_time();
    if (this_present_att_time || that_present_att_time) {
      if (!(this_present_att_time && that_present_att_time))
        return false;
      if (!this.att_time.equals(that.att_time))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPart_id()) ? 131071 : 524287);
    if (isSetPart_id())
      hashCode = hashCode * 8191 + part_id.hashCode();

    hashCode = hashCode * 8191 + car_id;

    hashCode = hashCode * 8191 + ((isSetNum()) ? 131071 : 524287);
    if (isSetNum())
      hashCode = hashCode * 8191 + num.hashCode();

    hashCode = hashCode * 8191 + shipper;

    hashCode = hashCode * 8191 + consigner;

    hashCode = hashCode * 8191 + mat;

    hashCode = hashCode * 8191 + att_code;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tara);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tara_e);

    hashCode = hashCode * 8191 + zone_e;

    hashCode = hashCode * 8191 + cause_id;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(carrying_e);

    hashCode = hashCode * 8191 + ((isSetAtt_time()) ? 131071 : 524287);
    if (isSetAtt_time())
      hashCode = hashCode * 8191 + att_time.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(car_t other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPart_id()).compareTo(other.isSetPart_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPart_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.part_id, other.part_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCar_id()).compareTo(other.isSetCar_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCar_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.car_id, other.car_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShipper()).compareTo(other.isSetShipper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShipper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shipper, other.shipper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConsigner()).compareTo(other.isSetConsigner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsigner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consigner, other.consigner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMat()).compareTo(other.isSetMat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mat, other.mat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAtt_code()).compareTo(other.isSetAtt_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAtt_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.att_code, other.att_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTara()).compareTo(other.isSetTara());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTara()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tara, other.tara);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTara_e()).compareTo(other.isSetTara_e());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTara_e()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tara_e, other.tara_e);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetZone_e()).compareTo(other.isSetZone_e());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZone_e()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zone_e, other.zone_e);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCause_id()).compareTo(other.isSetCause_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCause_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cause_id, other.cause_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCarrying_e()).compareTo(other.isSetCarrying_e());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarrying_e()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carrying_e, other.carrying_e);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAtt_time()).compareTo(other.isSetAtt_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAtt_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.att_time, other.att_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("car_t(");
    boolean first = true;

    sb.append("part_id:");
    if (this.part_id == null) {
      sb.append("null");
    } else {
      sb.append(this.part_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("car_id:");
    sb.append(this.car_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num:");
    if (this.num == null) {
      sb.append("null");
    } else {
      sb.append(this.num);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shipper:");
    sb.append(this.shipper);
    first = false;
    if (!first) sb.append(", ");
    sb.append("consigner:");
    sb.append(this.consigner);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mat:");
    sb.append(this.mat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("att_code:");
    sb.append(this.att_code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tara:");
    sb.append(this.tara);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tara_e:");
    sb.append(this.tara_e);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zone_e:");
    sb.append(this.zone_e);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cause_id:");
    sb.append(this.cause_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carrying_e:");
    sb.append(this.carrying_e);
    first = false;
    if (!first) sb.append(", ");
    sb.append("att_time:");
    if (this.att_time == null) {
      sb.append("null");
    } else {
      sb.append(this.att_time);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class car_tStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public car_tStandardScheme getScheme() {
      return new car_tStandardScheme();
    }
  }

  private static class car_tStandardScheme extends org.apache.thrift.scheme.StandardScheme<car_t> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, car_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PART_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.part_id = iprot.readString();
              struct.setPart_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.car_id = iprot.readI32();
              struct.setCar_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.num = iprot.readString();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHIPPER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shipper = iprot.readI32();
              struct.setShipperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONSIGNER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.consigner = iprot.readI32();
              struct.setConsignerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mat = iprot.readI32();
              struct.setMatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ATT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.att_code = iprot.readI32();
              struct.setAtt_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TARA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tara = iprot.readDouble();
              struct.setTaraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TARA_E
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tara_e = iprot.readDouble();
              struct.setTara_eIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ZONE_E
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.zone_e = iprot.readI32();
              struct.setZone_eIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CAUSE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cause_id = iprot.readI32();
              struct.setCause_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CARRYING_E
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.carrying_e = iprot.readDouble();
              struct.setCarrying_eIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ATT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.att_time = iprot.readString();
              struct.setAtt_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, car_t struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.part_id != null) {
        oprot.writeFieldBegin(PART_ID_FIELD_DESC);
        oprot.writeString(struct.part_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CAR_ID_FIELD_DESC);
      oprot.writeI32(struct.car_id);
      oprot.writeFieldEnd();
      if (struct.num != null) {
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeString(struct.num);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHIPPER_FIELD_DESC);
      oprot.writeI32(struct.shipper);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONSIGNER_FIELD_DESC);
      oprot.writeI32(struct.consigner);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAT_FIELD_DESC);
      oprot.writeI32(struct.mat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ATT_CODE_FIELD_DESC);
      oprot.writeI32(struct.att_code);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARA_FIELD_DESC);
      oprot.writeDouble(struct.tara);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARA_E_FIELD_DESC);
      oprot.writeDouble(struct.tara_e);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ZONE_E_FIELD_DESC);
      oprot.writeI32(struct.zone_e);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAUSE_ID_FIELD_DESC);
      oprot.writeI32(struct.cause_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CARRYING_E_FIELD_DESC);
      oprot.writeDouble(struct.carrying_e);
      oprot.writeFieldEnd();
      if (struct.att_time != null) {
        oprot.writeFieldBegin(ATT_TIME_FIELD_DESC);
        oprot.writeString(struct.att_time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class car_tTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public car_tTupleScheme getScheme() {
      return new car_tTupleScheme();
    }
  }

  private static class car_tTupleScheme extends org.apache.thrift.scheme.TupleScheme<car_t> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, car_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPart_id()) {
        optionals.set(0);
      }
      if (struct.isSetCar_id()) {
        optionals.set(1);
      }
      if (struct.isSetNum()) {
        optionals.set(2);
      }
      if (struct.isSetShipper()) {
        optionals.set(3);
      }
      if (struct.isSetConsigner()) {
        optionals.set(4);
      }
      if (struct.isSetMat()) {
        optionals.set(5);
      }
      if (struct.isSetAtt_code()) {
        optionals.set(6);
      }
      if (struct.isSetTara()) {
        optionals.set(7);
      }
      if (struct.isSetTara_e()) {
        optionals.set(8);
      }
      if (struct.isSetZone_e()) {
        optionals.set(9);
      }
      if (struct.isSetCause_id()) {
        optionals.set(10);
      }
      if (struct.isSetCarrying_e()) {
        optionals.set(11);
      }
      if (struct.isSetAtt_time()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetPart_id()) {
        oprot.writeString(struct.part_id);
      }
      if (struct.isSetCar_id()) {
        oprot.writeI32(struct.car_id);
      }
      if (struct.isSetNum()) {
        oprot.writeString(struct.num);
      }
      if (struct.isSetShipper()) {
        oprot.writeI32(struct.shipper);
      }
      if (struct.isSetConsigner()) {
        oprot.writeI32(struct.consigner);
      }
      if (struct.isSetMat()) {
        oprot.writeI32(struct.mat);
      }
      if (struct.isSetAtt_code()) {
        oprot.writeI32(struct.att_code);
      }
      if (struct.isSetTara()) {
        oprot.writeDouble(struct.tara);
      }
      if (struct.isSetTara_e()) {
        oprot.writeDouble(struct.tara_e);
      }
      if (struct.isSetZone_e()) {
        oprot.writeI32(struct.zone_e);
      }
      if (struct.isSetCause_id()) {
        oprot.writeI32(struct.cause_id);
      }
      if (struct.isSetCarrying_e()) {
        oprot.writeDouble(struct.carrying_e);
      }
      if (struct.isSetAtt_time()) {
        oprot.writeString(struct.att_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, car_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.part_id = iprot.readString();
        struct.setPart_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.car_id = iprot.readI32();
        struct.setCar_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.num = iprot.readString();
        struct.setNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shipper = iprot.readI32();
        struct.setShipperIsSet(true);
      }
      if (incoming.get(4)) {
        struct.consigner = iprot.readI32();
        struct.setConsignerIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mat = iprot.readI32();
        struct.setMatIsSet(true);
      }
      if (incoming.get(6)) {
        struct.att_code = iprot.readI32();
        struct.setAtt_codeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tara = iprot.readDouble();
        struct.setTaraIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tara_e = iprot.readDouble();
        struct.setTara_eIsSet(true);
      }
      if (incoming.get(9)) {
        struct.zone_e = iprot.readI32();
        struct.setZone_eIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cause_id = iprot.readI32();
        struct.setCause_idIsSet(true);
      }
      if (incoming.get(11)) {
        struct.carrying_e = iprot.readDouble();
        struct.setCarrying_eIsSet(true);
      }
      if (incoming.get(12)) {
        struct.att_time = iprot.readString();
        struct.setAtt_timeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

