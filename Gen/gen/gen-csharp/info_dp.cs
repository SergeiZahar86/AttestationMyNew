/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class info_dp : TBase
{
  private state_bits _state;
  private int _active_wagon;
  private PusherPosition _position;

  public state_bits State
  {
    get
    {
      return _state;
    }
    set
    {
      __isset.state = true;
      this._state = value;
    }
  }

  public int Active_wagon
  {
    get
    {
      return _active_wagon;
    }
    set
    {
      __isset.active_wagon = true;
      this._active_wagon = value;
    }
  }

  public PusherPosition Position
  {
    get
    {
      return _position;
    }
    set
    {
      __isset.position = true;
      this._position = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool state;
    public bool active_wagon;
    public bool position;
  }

  public info_dp() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              State = new state_bits();
              State.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Active_wagon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Position = (PusherPosition)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("info_dp");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (State != null && __isset.state) {
        field.Name = "state";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        State.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.active_wagon) {
        field.Name = "active_wagon";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Active_wagon);
        oprot.WriteFieldEnd();
      }
      if (__isset.position) {
        field.Name = "position";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Position);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("info_dp(");
    bool __first = true;
    if (State != null && __isset.state) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("State: ");
      __sb.Append(State== null ? "<null>" : State.ToString());
    }
    if (__isset.active_wagon) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Active_wagon: ");
      __sb.Append(Active_wagon);
    }
    if (__isset.position) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Position: ");
      __sb.Append(Position);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

