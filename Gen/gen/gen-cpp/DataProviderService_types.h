/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataProviderService_TYPES_H
#define DataProviderService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




typedef int32_t int;

class DataProviderException;

class cause_t;

class contractor_t;

class mat_t;

class car_t;

class part_t;

class photo_t;

typedef struct _DataProviderException__isset {
  _DataProviderException__isset() : message(false), error_code(false) {}
  bool message :1;
  bool error_code :1;
} _DataProviderException__isset;

class DataProviderException : public ::apache::thrift::TException {
 public:

  DataProviderException(const DataProviderException&);
  DataProviderException& operator=(const DataProviderException&);
  DataProviderException() : message(), error_code(0) {
  }

  virtual ~DataProviderException() noexcept;
  std::string message;
  int error_code;

  _DataProviderException__isset __isset;

  void __set_message(const std::string& val);

  void __set_error_code(const int val);

  bool operator == (const DataProviderException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (!(error_code == rhs.error_code))
      return false;
    return true;
  }
  bool operator != (const DataProviderException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(DataProviderException &a, DataProviderException &b);

std::ostream& operator<<(std::ostream& out, const DataProviderException& obj);

typedef struct _cause_t__isset {
  _cause_t__isset() : id(false), name(false) {}
  bool id :1;
  bool name :1;
} _cause_t__isset;

class cause_t : public virtual ::apache::thrift::TBase {
 public:

  cause_t(const cause_t&);
  cause_t& operator=(const cause_t&);
  cause_t() : id(0), name() {
  }

  virtual ~cause_t() noexcept;
  int id;
  std::string name;

  _cause_t__isset __isset;

  void __set_id(const int val);

  void __set_name(const std::string& val);

  bool operator == (const cause_t & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const cause_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const cause_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(cause_t &a, cause_t &b);

std::ostream& operator<<(std::ostream& out, const cause_t& obj);

typedef struct _contractor_t__isset {
  _contractor_t__isset() : id(false), name(false), shipper(false), consigner(false) {}
  bool id :1;
  bool name :1;
  bool shipper :1;
  bool consigner :1;
} _contractor_t__isset;

class contractor_t : public virtual ::apache::thrift::TBase {
 public:

  contractor_t(const contractor_t&);
  contractor_t& operator=(const contractor_t&);
  contractor_t() : id(0), name(), shipper(0), consigner(0) {
  }

  virtual ~contractor_t() noexcept;
  int id;
  std::string name;
  bool shipper;
  bool consigner;

  _contractor_t__isset __isset;

  void __set_id(const int val);

  void __set_name(const std::string& val);

  void __set_shipper(const bool val);

  void __set_consigner(const bool val);

  bool operator == (const contractor_t & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(shipper == rhs.shipper))
      return false;
    if (!(consigner == rhs.consigner))
      return false;
    return true;
  }
  bool operator != (const contractor_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const contractor_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(contractor_t &a, contractor_t &b);

std::ostream& operator<<(std::ostream& out, const contractor_t& obj);

typedef struct _mat_t__isset {
  _mat_t__isset() : id(false), name(false) {}
  bool id :1;
  bool name :1;
} _mat_t__isset;

class mat_t : public virtual ::apache::thrift::TBase {
 public:

  mat_t(const mat_t&);
  mat_t& operator=(const mat_t&);
  mat_t() : id(0), name() {
  }

  virtual ~mat_t() noexcept;
  int id;
  std::string name;

  _mat_t__isset __isset;

  void __set_id(const int val);

  void __set_name(const std::string& val);

  bool operator == (const mat_t & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const mat_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const mat_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(mat_t &a, mat_t &b);

std::ostream& operator<<(std::ostream& out, const mat_t& obj);

typedef struct _car_t__isset {
  _car_t__isset() : part_id(false), car_id(false), num(false), shipper(false), consigner(false), mat(false), att_code(false), tara(false), tara_e(false), zone_e(false), cause_id(false), carrying_e(false), att_time(false) {}
  bool part_id :1;
  bool car_id :1;
  bool num :1;
  bool shipper :1;
  bool consigner :1;
  bool mat :1;
  bool att_code :1;
  bool tara :1;
  bool tara_e :1;
  bool zone_e :1;
  bool cause_id :1;
  bool carrying_e :1;
  bool att_time :1;
} _car_t__isset;

class car_t : public virtual ::apache::thrift::TBase {
 public:

  car_t(const car_t&);
  car_t& operator=(const car_t&);
  car_t() : part_id(), car_id(0), num(), shipper(0), consigner(0), mat(0), att_code(0), tara(0), tara_e(0), zone_e(0), cause_id(0), carrying_e(0), att_time() {
  }

  virtual ~car_t() noexcept;
  std::string part_id;
  int car_id;
  std::string num;
  int shipper;
  int consigner;
  int mat;
  int att_code;
  double tara;
  double tara_e;
  int zone_e;
  int cause_id;
  double carrying_e;
  std::string att_time;

  _car_t__isset __isset;

  void __set_part_id(const std::string& val);

  void __set_car_id(const int val);

  void __set_num(const std::string& val);

  void __set_shipper(const int val);

  void __set_consigner(const int val);

  void __set_mat(const int val);

  void __set_att_code(const int val);

  void __set_tara(const double val);

  void __set_tara_e(const double val);

  void __set_zone_e(const int val);

  void __set_cause_id(const int val);

  void __set_carrying_e(const double val);

  void __set_att_time(const std::string& val);

  bool operator == (const car_t & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    if (!(car_id == rhs.car_id))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(shipper == rhs.shipper))
      return false;
    if (!(consigner == rhs.consigner))
      return false;
    if (!(mat == rhs.mat))
      return false;
    if (!(att_code == rhs.att_code))
      return false;
    if (!(tara == rhs.tara))
      return false;
    if (!(tara_e == rhs.tara_e))
      return false;
    if (!(zone_e == rhs.zone_e))
      return false;
    if (!(cause_id == rhs.cause_id))
      return false;
    if (!(carrying_e == rhs.carrying_e))
      return false;
    if (!(att_time == rhs.att_time))
      return false;
    return true;
  }
  bool operator != (const car_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const car_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(car_t &a, car_t &b);

std::ostream& operator<<(std::ostream& out, const car_t& obj);

typedef struct _part_t__isset {
  _part_t__isset() : part_id(false), oper(false), cars(false), start_time(false), end_time(false) {}
  bool part_id :1;
  bool oper :1;
  bool cars :1;
  bool start_time :1;
  bool end_time :1;
} _part_t__isset;

class part_t : public virtual ::apache::thrift::TBase {
 public:

  part_t(const part_t&);
  part_t& operator=(const part_t&);
  part_t() : part_id(), oper(), start_time(), end_time() {
  }

  virtual ~part_t() noexcept;
  std::string part_id;
  std::string oper;
  std::vector<car_t>  cars;
  std::string start_time;
  std::string end_time;

  _part_t__isset __isset;

  void __set_part_id(const std::string& val);

  void __set_oper(const std::string& val);

  void __set_cars(const std::vector<car_t> & val);

  void __set_start_time(const std::string& val);

  void __set_end_time(const std::string& val);

  bool operator == (const part_t & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    if (!(oper == rhs.oper))
      return false;
    if (!(cars == rhs.cars))
      return false;
    if (!(start_time == rhs.start_time))
      return false;
    if (!(end_time == rhs.end_time))
      return false;
    return true;
  }
  bool operator != (const part_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const part_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(part_t &a, part_t &b);

std::ostream& operator<<(std::ostream& out, const part_t& obj);

typedef struct _photo_t__isset {
  _photo_t__isset() : left(false), right(false), top(false) {}
  bool left :1;
  bool right :1;
  bool top :1;
} _photo_t__isset;

class photo_t : public virtual ::apache::thrift::TBase {
 public:

  photo_t(const photo_t&);
  photo_t& operator=(const photo_t&);
  photo_t() : left(), right(), top() {
  }

  virtual ~photo_t() noexcept;
  std::string left;
  std::string right;
  std::string top;

  _photo_t__isset __isset;

  void __set_left(const std::string& val);

  void __set_right(const std::string& val);

  void __set_top(const std::string& val);

  bool operator == (const photo_t & rhs) const
  {
    if (!(left == rhs.left))
      return false;
    if (!(right == rhs.right))
      return false;
    if (!(top == rhs.top))
      return false;
    return true;
  }
  bool operator != (const photo_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const photo_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(photo_t &a, photo_t &b);

std::ostream& operator<<(std::ostream& out, const photo_t& obj);



#endif
