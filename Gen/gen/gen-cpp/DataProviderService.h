/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataProviderService_H
#define DataProviderService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "DataProviderService_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DataProviderServiceIf {
 public:
  virtual ~DataProviderServiceIf() {}
  virtual void getCauses(std::vector<cause_t> & _return) = 0;
  virtual void getContractors(std::vector<contractor_t> & _return) = 0;
  virtual void getMat(std::vector<mat_t> & _return) = 0;
  virtual void getPhoto(photo_t& _return, const std::string& part_id, const int car_id) = 0;
  virtual void getPart(part_t& _return, const std::string& part_id) = 0;
  virtual void getUser(std::string& _return, const std::string& login, const std::string& password, const std::string& empl_id) = 0;
  virtual void getNum(std::string& _return, const std::string& part_id, const int car_id) = 0;
  virtual void getOldPart(std::string& _return) = 0;
  virtual bool setNum(const std::string& part_id, const int car_id, const std::string& num) = 0;
  virtual bool setAtt(const std::string& part_id, const int car_id, const int att_code) = 0;
  virtual bool setUser(const std::string& part_id, const std::string& user) = 0;
  virtual bool setTara(const std::string& part_id, const int car_id, const double tara) = 0;
  virtual bool setZone(const std::string& part_id, const int car_id, const int zone) = 0;
  virtual bool setCarry(const std::string& part_id, const int car_id, const double carry) = 0;
  virtual bool setShipper(const std::string& part_id, const int car_id, const int shipper) = 0;
  virtual bool setConsigner(const std::string& part_id, const int car_id, const int consigner) = 0;
  virtual bool setMat(const std::string& part_id, const int car_id, const int mat) = 0;
  virtual bool setCar(const std::string& part_id, const int car_id, const car_t& car) = 0;
  virtual void startAtt(part_t& _return, const std::string& user) = 0;
  virtual bool endAtt(const std::string& part_id) = 0;
  virtual bool changePass(const std::string& login, const std::string& oldPass, const std::string& newPass, const std::string& newEmpl_id) = 0;
};

class DataProviderServiceIfFactory {
 public:
  typedef DataProviderServiceIf Handler;

  virtual ~DataProviderServiceIfFactory() {}

  virtual DataProviderServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DataProviderServiceIf* /* handler */) = 0;
};

class DataProviderServiceIfSingletonFactory : virtual public DataProviderServiceIfFactory {
 public:
  DataProviderServiceIfSingletonFactory(const ::std::shared_ptr<DataProviderServiceIf>& iface) : iface_(iface) {}
  virtual ~DataProviderServiceIfSingletonFactory() {}

  virtual DataProviderServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DataProviderServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<DataProviderServiceIf> iface_;
};

class DataProviderServiceNull : virtual public DataProviderServiceIf {
 public:
  virtual ~DataProviderServiceNull() {}
  void getCauses(std::vector<cause_t> & /* _return */) {
    return;
  }
  void getContractors(std::vector<contractor_t> & /* _return */) {
    return;
  }
  void getMat(std::vector<mat_t> & /* _return */) {
    return;
  }
  void getPhoto(photo_t& /* _return */, const std::string& /* part_id */, const int /* car_id */) {
    return;
  }
  void getPart(part_t& /* _return */, const std::string& /* part_id */) {
    return;
  }
  void getUser(std::string& /* _return */, const std::string& /* login */, const std::string& /* password */, const std::string& /* empl_id */) {
    return;
  }
  void getNum(std::string& /* _return */, const std::string& /* part_id */, const int /* car_id */) {
    return;
  }
  void getOldPart(std::string& /* _return */) {
    return;
  }
  bool setNum(const std::string& /* part_id */, const int /* car_id */, const std::string& /* num */) {
    bool _return = false;
    return _return;
  }
  bool setAtt(const std::string& /* part_id */, const int /* car_id */, const int /* att_code */) {
    bool _return = false;
    return _return;
  }
  bool setUser(const std::string& /* part_id */, const std::string& /* user */) {
    bool _return = false;
    return _return;
  }
  bool setTara(const std::string& /* part_id */, const int /* car_id */, const double /* tara */) {
    bool _return = false;
    return _return;
  }
  bool setZone(const std::string& /* part_id */, const int /* car_id */, const int /* zone */) {
    bool _return = false;
    return _return;
  }
  bool setCarry(const std::string& /* part_id */, const int /* car_id */, const double /* carry */) {
    bool _return = false;
    return _return;
  }
  bool setShipper(const std::string& /* part_id */, const int /* car_id */, const int /* shipper */) {
    bool _return = false;
    return _return;
  }
  bool setConsigner(const std::string& /* part_id */, const int /* car_id */, const int /* consigner */) {
    bool _return = false;
    return _return;
  }
  bool setMat(const std::string& /* part_id */, const int /* car_id */, const int /* mat */) {
    bool _return = false;
    return _return;
  }
  bool setCar(const std::string& /* part_id */, const int /* car_id */, const car_t& /* car */) {
    bool _return = false;
    return _return;
  }
  void startAtt(part_t& /* _return */, const std::string& /* user */) {
    return;
  }
  bool endAtt(const std::string& /* part_id */) {
    bool _return = false;
    return _return;
  }
  bool changePass(const std::string& /* login */, const std::string& /* oldPass */, const std::string& /* newPass */, const std::string& /* newEmpl_id */) {
    bool _return = false;
    return _return;
  }
};


class DataProviderService_getCauses_args {
 public:

  DataProviderService_getCauses_args(const DataProviderService_getCauses_args&);
  DataProviderService_getCauses_args& operator=(const DataProviderService_getCauses_args&);
  DataProviderService_getCauses_args() {
  }

  virtual ~DataProviderService_getCauses_args() noexcept;

  bool operator == (const DataProviderService_getCauses_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataProviderService_getCauses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getCauses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_getCauses_pargs {
 public:


  virtual ~DataProviderService_getCauses_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getCauses_result__isset {
  _DataProviderService_getCauses_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getCauses_result__isset;

class DataProviderService_getCauses_result {
 public:

  DataProviderService_getCauses_result(const DataProviderService_getCauses_result&);
  DataProviderService_getCauses_result& operator=(const DataProviderService_getCauses_result&);
  DataProviderService_getCauses_result() {
  }

  virtual ~DataProviderService_getCauses_result() noexcept;
  std::vector<cause_t>  success;
  DataProviderException ex;

  _DataProviderService_getCauses_result__isset __isset;

  void __set_success(const std::vector<cause_t> & val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_getCauses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_getCauses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getCauses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getCauses_presult__isset {
  _DataProviderService_getCauses_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getCauses_presult__isset;

class DataProviderService_getCauses_presult {
 public:


  virtual ~DataProviderService_getCauses_presult() noexcept;
  std::vector<cause_t> * success;
  DataProviderException ex;

  _DataProviderService_getCauses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DataProviderService_getContractors_args {
 public:

  DataProviderService_getContractors_args(const DataProviderService_getContractors_args&);
  DataProviderService_getContractors_args& operator=(const DataProviderService_getContractors_args&);
  DataProviderService_getContractors_args() {
  }

  virtual ~DataProviderService_getContractors_args() noexcept;

  bool operator == (const DataProviderService_getContractors_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataProviderService_getContractors_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getContractors_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_getContractors_pargs {
 public:


  virtual ~DataProviderService_getContractors_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getContractors_result__isset {
  _DataProviderService_getContractors_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getContractors_result__isset;

class DataProviderService_getContractors_result {
 public:

  DataProviderService_getContractors_result(const DataProviderService_getContractors_result&);
  DataProviderService_getContractors_result& operator=(const DataProviderService_getContractors_result&);
  DataProviderService_getContractors_result() {
  }

  virtual ~DataProviderService_getContractors_result() noexcept;
  std::vector<contractor_t>  success;
  DataProviderException ex;

  _DataProviderService_getContractors_result__isset __isset;

  void __set_success(const std::vector<contractor_t> & val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_getContractors_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_getContractors_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getContractors_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getContractors_presult__isset {
  _DataProviderService_getContractors_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getContractors_presult__isset;

class DataProviderService_getContractors_presult {
 public:


  virtual ~DataProviderService_getContractors_presult() noexcept;
  std::vector<contractor_t> * success;
  DataProviderException ex;

  _DataProviderService_getContractors_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DataProviderService_getMat_args {
 public:

  DataProviderService_getMat_args(const DataProviderService_getMat_args&);
  DataProviderService_getMat_args& operator=(const DataProviderService_getMat_args&);
  DataProviderService_getMat_args() {
  }

  virtual ~DataProviderService_getMat_args() noexcept;

  bool operator == (const DataProviderService_getMat_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataProviderService_getMat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getMat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_getMat_pargs {
 public:


  virtual ~DataProviderService_getMat_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getMat_result__isset {
  _DataProviderService_getMat_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getMat_result__isset;

class DataProviderService_getMat_result {
 public:

  DataProviderService_getMat_result(const DataProviderService_getMat_result&);
  DataProviderService_getMat_result& operator=(const DataProviderService_getMat_result&);
  DataProviderService_getMat_result() {
  }

  virtual ~DataProviderService_getMat_result() noexcept;
  std::vector<mat_t>  success;
  DataProviderException ex;

  _DataProviderService_getMat_result__isset __isset;

  void __set_success(const std::vector<mat_t> & val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_getMat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_getMat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getMat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getMat_presult__isset {
  _DataProviderService_getMat_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getMat_presult__isset;

class DataProviderService_getMat_presult {
 public:


  virtual ~DataProviderService_getMat_presult() noexcept;
  std::vector<mat_t> * success;
  DataProviderException ex;

  _DataProviderService_getMat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_getPhoto_args__isset {
  _DataProviderService_getPhoto_args__isset() : part_id(false), car_id(false) {}
  bool part_id :1;
  bool car_id :1;
} _DataProviderService_getPhoto_args__isset;

class DataProviderService_getPhoto_args {
 public:

  DataProviderService_getPhoto_args(const DataProviderService_getPhoto_args&);
  DataProviderService_getPhoto_args& operator=(const DataProviderService_getPhoto_args&);
  DataProviderService_getPhoto_args() : part_id(), car_id(0) {
  }

  virtual ~DataProviderService_getPhoto_args() noexcept;
  std::string part_id;
  int car_id;

  _DataProviderService_getPhoto_args__isset __isset;

  void __set_part_id(const std::string& val);

  void __set_car_id(const int val);

  bool operator == (const DataProviderService_getPhoto_args & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    if (!(car_id == rhs.car_id))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_getPhoto_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getPhoto_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_getPhoto_pargs {
 public:


  virtual ~DataProviderService_getPhoto_pargs() noexcept;
  const std::string* part_id;
  const int* car_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getPhoto_result__isset {
  _DataProviderService_getPhoto_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getPhoto_result__isset;

class DataProviderService_getPhoto_result {
 public:

  DataProviderService_getPhoto_result(const DataProviderService_getPhoto_result&);
  DataProviderService_getPhoto_result& operator=(const DataProviderService_getPhoto_result&);
  DataProviderService_getPhoto_result() {
  }

  virtual ~DataProviderService_getPhoto_result() noexcept;
  photo_t success;
  DataProviderException ex;

  _DataProviderService_getPhoto_result__isset __isset;

  void __set_success(const photo_t& val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_getPhoto_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_getPhoto_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getPhoto_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getPhoto_presult__isset {
  _DataProviderService_getPhoto_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getPhoto_presult__isset;

class DataProviderService_getPhoto_presult {
 public:


  virtual ~DataProviderService_getPhoto_presult() noexcept;
  photo_t* success;
  DataProviderException ex;

  _DataProviderService_getPhoto_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_getPart_args__isset {
  _DataProviderService_getPart_args__isset() : part_id(false) {}
  bool part_id :1;
} _DataProviderService_getPart_args__isset;

class DataProviderService_getPart_args {
 public:

  DataProviderService_getPart_args(const DataProviderService_getPart_args&);
  DataProviderService_getPart_args& operator=(const DataProviderService_getPart_args&);
  DataProviderService_getPart_args() : part_id() {
  }

  virtual ~DataProviderService_getPart_args() noexcept;
  std::string part_id;

  _DataProviderService_getPart_args__isset __isset;

  void __set_part_id(const std::string& val);

  bool operator == (const DataProviderService_getPart_args & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_getPart_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getPart_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_getPart_pargs {
 public:


  virtual ~DataProviderService_getPart_pargs() noexcept;
  const std::string* part_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getPart_result__isset {
  _DataProviderService_getPart_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getPart_result__isset;

class DataProviderService_getPart_result {
 public:

  DataProviderService_getPart_result(const DataProviderService_getPart_result&);
  DataProviderService_getPart_result& operator=(const DataProviderService_getPart_result&);
  DataProviderService_getPart_result() {
  }

  virtual ~DataProviderService_getPart_result() noexcept;
  part_t success;
  DataProviderException ex;

  _DataProviderService_getPart_result__isset __isset;

  void __set_success(const part_t& val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_getPart_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_getPart_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getPart_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getPart_presult__isset {
  _DataProviderService_getPart_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getPart_presult__isset;

class DataProviderService_getPart_presult {
 public:


  virtual ~DataProviderService_getPart_presult() noexcept;
  part_t* success;
  DataProviderException ex;

  _DataProviderService_getPart_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_getUser_args__isset {
  _DataProviderService_getUser_args__isset() : login(false), password(false), empl_id(false) {}
  bool login :1;
  bool password :1;
  bool empl_id :1;
} _DataProviderService_getUser_args__isset;

class DataProviderService_getUser_args {
 public:

  DataProviderService_getUser_args(const DataProviderService_getUser_args&);
  DataProviderService_getUser_args& operator=(const DataProviderService_getUser_args&);
  DataProviderService_getUser_args() : login(), password(), empl_id() {
  }

  virtual ~DataProviderService_getUser_args() noexcept;
  std::string login;
  std::string password;
  std::string empl_id;

  _DataProviderService_getUser_args__isset __isset;

  void __set_login(const std::string& val);

  void __set_password(const std::string& val);

  void __set_empl_id(const std::string& val);

  bool operator == (const DataProviderService_getUser_args & rhs) const
  {
    if (!(login == rhs.login))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(empl_id == rhs.empl_id))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_getUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_getUser_pargs {
 public:


  virtual ~DataProviderService_getUser_pargs() noexcept;
  const std::string* login;
  const std::string* password;
  const std::string* empl_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getUser_result__isset {
  _DataProviderService_getUser_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getUser_result__isset;

class DataProviderService_getUser_result {
 public:

  DataProviderService_getUser_result(const DataProviderService_getUser_result&);
  DataProviderService_getUser_result& operator=(const DataProviderService_getUser_result&);
  DataProviderService_getUser_result() : success() {
  }

  virtual ~DataProviderService_getUser_result() noexcept;
  std::string success;
  DataProviderException ex;

  _DataProviderService_getUser_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_getUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_getUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getUser_presult__isset {
  _DataProviderService_getUser_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getUser_presult__isset;

class DataProviderService_getUser_presult {
 public:


  virtual ~DataProviderService_getUser_presult() noexcept;
  std::string* success;
  DataProviderException ex;

  _DataProviderService_getUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_getNum_args__isset {
  _DataProviderService_getNum_args__isset() : part_id(false), car_id(false) {}
  bool part_id :1;
  bool car_id :1;
} _DataProviderService_getNum_args__isset;

class DataProviderService_getNum_args {
 public:

  DataProviderService_getNum_args(const DataProviderService_getNum_args&);
  DataProviderService_getNum_args& operator=(const DataProviderService_getNum_args&);
  DataProviderService_getNum_args() : part_id(), car_id(0) {
  }

  virtual ~DataProviderService_getNum_args() noexcept;
  std::string part_id;
  int car_id;

  _DataProviderService_getNum_args__isset __isset;

  void __set_part_id(const std::string& val);

  void __set_car_id(const int val);

  bool operator == (const DataProviderService_getNum_args & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    if (!(car_id == rhs.car_id))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_getNum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getNum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_getNum_pargs {
 public:


  virtual ~DataProviderService_getNum_pargs() noexcept;
  const std::string* part_id;
  const int* car_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getNum_result__isset {
  _DataProviderService_getNum_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getNum_result__isset;

class DataProviderService_getNum_result {
 public:

  DataProviderService_getNum_result(const DataProviderService_getNum_result&);
  DataProviderService_getNum_result& operator=(const DataProviderService_getNum_result&);
  DataProviderService_getNum_result() : success() {
  }

  virtual ~DataProviderService_getNum_result() noexcept;
  std::string success;
  DataProviderException ex;

  _DataProviderService_getNum_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_getNum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_getNum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getNum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getNum_presult__isset {
  _DataProviderService_getNum_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getNum_presult__isset;

class DataProviderService_getNum_presult {
 public:


  virtual ~DataProviderService_getNum_presult() noexcept;
  std::string* success;
  DataProviderException ex;

  _DataProviderService_getNum_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DataProviderService_getOldPart_args {
 public:

  DataProviderService_getOldPart_args(const DataProviderService_getOldPart_args&);
  DataProviderService_getOldPart_args& operator=(const DataProviderService_getOldPart_args&);
  DataProviderService_getOldPart_args() {
  }

  virtual ~DataProviderService_getOldPart_args() noexcept;

  bool operator == (const DataProviderService_getOldPart_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DataProviderService_getOldPart_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getOldPart_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_getOldPart_pargs {
 public:


  virtual ~DataProviderService_getOldPart_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getOldPart_result__isset {
  _DataProviderService_getOldPart_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getOldPart_result__isset;

class DataProviderService_getOldPart_result {
 public:

  DataProviderService_getOldPart_result(const DataProviderService_getOldPart_result&);
  DataProviderService_getOldPart_result& operator=(const DataProviderService_getOldPart_result&);
  DataProviderService_getOldPart_result() : success() {
  }

  virtual ~DataProviderService_getOldPart_result() noexcept;
  std::string success;
  DataProviderException ex;

  _DataProviderService_getOldPart_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_getOldPart_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_getOldPart_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_getOldPart_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_getOldPart_presult__isset {
  _DataProviderService_getOldPart_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_getOldPart_presult__isset;

class DataProviderService_getOldPart_presult {
 public:


  virtual ~DataProviderService_getOldPart_presult() noexcept;
  std::string* success;
  DataProviderException ex;

  _DataProviderService_getOldPart_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_setNum_args__isset {
  _DataProviderService_setNum_args__isset() : part_id(false), car_id(false), num(false) {}
  bool part_id :1;
  bool car_id :1;
  bool num :1;
} _DataProviderService_setNum_args__isset;

class DataProviderService_setNum_args {
 public:

  DataProviderService_setNum_args(const DataProviderService_setNum_args&);
  DataProviderService_setNum_args& operator=(const DataProviderService_setNum_args&);
  DataProviderService_setNum_args() : part_id(), car_id(0), num() {
  }

  virtual ~DataProviderService_setNum_args() noexcept;
  std::string part_id;
  int car_id;
  std::string num;

  _DataProviderService_setNum_args__isset __isset;

  void __set_part_id(const std::string& val);

  void __set_car_id(const int val);

  void __set_num(const std::string& val);

  bool operator == (const DataProviderService_setNum_args & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    if (!(car_id == rhs.car_id))
      return false;
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setNum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setNum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_setNum_pargs {
 public:


  virtual ~DataProviderService_setNum_pargs() noexcept;
  const std::string* part_id;
  const int* car_id;
  const std::string* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setNum_result__isset {
  _DataProviderService_setNum_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setNum_result__isset;

class DataProviderService_setNum_result {
 public:

  DataProviderService_setNum_result(const DataProviderService_setNum_result&);
  DataProviderService_setNum_result& operator=(const DataProviderService_setNum_result&);
  DataProviderService_setNum_result() : success(0) {
  }

  virtual ~DataProviderService_setNum_result() noexcept;
  bool success;
  DataProviderException ex;

  _DataProviderService_setNum_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_setNum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setNum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setNum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setNum_presult__isset {
  _DataProviderService_setNum_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setNum_presult__isset;

class DataProviderService_setNum_presult {
 public:


  virtual ~DataProviderService_setNum_presult() noexcept;
  bool* success;
  DataProviderException ex;

  _DataProviderService_setNum_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_setAtt_args__isset {
  _DataProviderService_setAtt_args__isset() : part_id(false), car_id(false), att_code(false) {}
  bool part_id :1;
  bool car_id :1;
  bool att_code :1;
} _DataProviderService_setAtt_args__isset;

class DataProviderService_setAtt_args {
 public:

  DataProviderService_setAtt_args(const DataProviderService_setAtt_args&);
  DataProviderService_setAtt_args& operator=(const DataProviderService_setAtt_args&);
  DataProviderService_setAtt_args() : part_id(), car_id(0), att_code(0) {
  }

  virtual ~DataProviderService_setAtt_args() noexcept;
  std::string part_id;
  int car_id;
  int att_code;

  _DataProviderService_setAtt_args__isset __isset;

  void __set_part_id(const std::string& val);

  void __set_car_id(const int val);

  void __set_att_code(const int val);

  bool operator == (const DataProviderService_setAtt_args & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    if (!(car_id == rhs.car_id))
      return false;
    if (!(att_code == rhs.att_code))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setAtt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setAtt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_setAtt_pargs {
 public:


  virtual ~DataProviderService_setAtt_pargs() noexcept;
  const std::string* part_id;
  const int* car_id;
  const int* att_code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setAtt_result__isset {
  _DataProviderService_setAtt_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setAtt_result__isset;

class DataProviderService_setAtt_result {
 public:

  DataProviderService_setAtt_result(const DataProviderService_setAtt_result&);
  DataProviderService_setAtt_result& operator=(const DataProviderService_setAtt_result&);
  DataProviderService_setAtt_result() : success(0) {
  }

  virtual ~DataProviderService_setAtt_result() noexcept;
  bool success;
  DataProviderException ex;

  _DataProviderService_setAtt_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_setAtt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setAtt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setAtt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setAtt_presult__isset {
  _DataProviderService_setAtt_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setAtt_presult__isset;

class DataProviderService_setAtt_presult {
 public:


  virtual ~DataProviderService_setAtt_presult() noexcept;
  bool* success;
  DataProviderException ex;

  _DataProviderService_setAtt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_setUser_args__isset {
  _DataProviderService_setUser_args__isset() : part_id(false), user(false) {}
  bool part_id :1;
  bool user :1;
} _DataProviderService_setUser_args__isset;

class DataProviderService_setUser_args {
 public:

  DataProviderService_setUser_args(const DataProviderService_setUser_args&);
  DataProviderService_setUser_args& operator=(const DataProviderService_setUser_args&);
  DataProviderService_setUser_args() : part_id(), user() {
  }

  virtual ~DataProviderService_setUser_args() noexcept;
  std::string part_id;
  std::string user;

  _DataProviderService_setUser_args__isset __isset;

  void __set_part_id(const std::string& val);

  void __set_user(const std::string& val);

  bool operator == (const DataProviderService_setUser_args & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_setUser_pargs {
 public:


  virtual ~DataProviderService_setUser_pargs() noexcept;
  const std::string* part_id;
  const std::string* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setUser_result__isset {
  _DataProviderService_setUser_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setUser_result__isset;

class DataProviderService_setUser_result {
 public:

  DataProviderService_setUser_result(const DataProviderService_setUser_result&);
  DataProviderService_setUser_result& operator=(const DataProviderService_setUser_result&);
  DataProviderService_setUser_result() : success(0) {
  }

  virtual ~DataProviderService_setUser_result() noexcept;
  bool success;
  DataProviderException ex;

  _DataProviderService_setUser_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_setUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setUser_presult__isset {
  _DataProviderService_setUser_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setUser_presult__isset;

class DataProviderService_setUser_presult {
 public:


  virtual ~DataProviderService_setUser_presult() noexcept;
  bool* success;
  DataProviderException ex;

  _DataProviderService_setUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_setTara_args__isset {
  _DataProviderService_setTara_args__isset() : part_id(false), car_id(false), tara(false) {}
  bool part_id :1;
  bool car_id :1;
  bool tara :1;
} _DataProviderService_setTara_args__isset;

class DataProviderService_setTara_args {
 public:

  DataProviderService_setTara_args(const DataProviderService_setTara_args&);
  DataProviderService_setTara_args& operator=(const DataProviderService_setTara_args&);
  DataProviderService_setTara_args() : part_id(), car_id(0), tara(0) {
  }

  virtual ~DataProviderService_setTara_args() noexcept;
  std::string part_id;
  int car_id;
  double tara;

  _DataProviderService_setTara_args__isset __isset;

  void __set_part_id(const std::string& val);

  void __set_car_id(const int val);

  void __set_tara(const double val);

  bool operator == (const DataProviderService_setTara_args & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    if (!(car_id == rhs.car_id))
      return false;
    if (!(tara == rhs.tara))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setTara_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setTara_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_setTara_pargs {
 public:


  virtual ~DataProviderService_setTara_pargs() noexcept;
  const std::string* part_id;
  const int* car_id;
  const double* tara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setTara_result__isset {
  _DataProviderService_setTara_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setTara_result__isset;

class DataProviderService_setTara_result {
 public:

  DataProviderService_setTara_result(const DataProviderService_setTara_result&);
  DataProviderService_setTara_result& operator=(const DataProviderService_setTara_result&);
  DataProviderService_setTara_result() : success(0) {
  }

  virtual ~DataProviderService_setTara_result() noexcept;
  bool success;
  DataProviderException ex;

  _DataProviderService_setTara_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_setTara_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setTara_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setTara_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setTara_presult__isset {
  _DataProviderService_setTara_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setTara_presult__isset;

class DataProviderService_setTara_presult {
 public:


  virtual ~DataProviderService_setTara_presult() noexcept;
  bool* success;
  DataProviderException ex;

  _DataProviderService_setTara_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_setZone_args__isset {
  _DataProviderService_setZone_args__isset() : part_id(false), car_id(false), zone(false) {}
  bool part_id :1;
  bool car_id :1;
  bool zone :1;
} _DataProviderService_setZone_args__isset;

class DataProviderService_setZone_args {
 public:

  DataProviderService_setZone_args(const DataProviderService_setZone_args&);
  DataProviderService_setZone_args& operator=(const DataProviderService_setZone_args&);
  DataProviderService_setZone_args() : part_id(), car_id(0), zone(0) {
  }

  virtual ~DataProviderService_setZone_args() noexcept;
  std::string part_id;
  int car_id;
  int zone;

  _DataProviderService_setZone_args__isset __isset;

  void __set_part_id(const std::string& val);

  void __set_car_id(const int val);

  void __set_zone(const int val);

  bool operator == (const DataProviderService_setZone_args & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    if (!(car_id == rhs.car_id))
      return false;
    if (!(zone == rhs.zone))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setZone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setZone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_setZone_pargs {
 public:


  virtual ~DataProviderService_setZone_pargs() noexcept;
  const std::string* part_id;
  const int* car_id;
  const int* zone;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setZone_result__isset {
  _DataProviderService_setZone_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setZone_result__isset;

class DataProviderService_setZone_result {
 public:

  DataProviderService_setZone_result(const DataProviderService_setZone_result&);
  DataProviderService_setZone_result& operator=(const DataProviderService_setZone_result&);
  DataProviderService_setZone_result() : success(0) {
  }

  virtual ~DataProviderService_setZone_result() noexcept;
  bool success;
  DataProviderException ex;

  _DataProviderService_setZone_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_setZone_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setZone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setZone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setZone_presult__isset {
  _DataProviderService_setZone_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setZone_presult__isset;

class DataProviderService_setZone_presult {
 public:


  virtual ~DataProviderService_setZone_presult() noexcept;
  bool* success;
  DataProviderException ex;

  _DataProviderService_setZone_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_setCarry_args__isset {
  _DataProviderService_setCarry_args__isset() : part_id(false), car_id(false), carry(false) {}
  bool part_id :1;
  bool car_id :1;
  bool carry :1;
} _DataProviderService_setCarry_args__isset;

class DataProviderService_setCarry_args {
 public:

  DataProviderService_setCarry_args(const DataProviderService_setCarry_args&);
  DataProviderService_setCarry_args& operator=(const DataProviderService_setCarry_args&);
  DataProviderService_setCarry_args() : part_id(), car_id(0), carry(0) {
  }

  virtual ~DataProviderService_setCarry_args() noexcept;
  std::string part_id;
  int car_id;
  double carry;

  _DataProviderService_setCarry_args__isset __isset;

  void __set_part_id(const std::string& val);

  void __set_car_id(const int val);

  void __set_carry(const double val);

  bool operator == (const DataProviderService_setCarry_args & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    if (!(car_id == rhs.car_id))
      return false;
    if (!(carry == rhs.carry))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setCarry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setCarry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_setCarry_pargs {
 public:


  virtual ~DataProviderService_setCarry_pargs() noexcept;
  const std::string* part_id;
  const int* car_id;
  const double* carry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setCarry_result__isset {
  _DataProviderService_setCarry_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setCarry_result__isset;

class DataProviderService_setCarry_result {
 public:

  DataProviderService_setCarry_result(const DataProviderService_setCarry_result&);
  DataProviderService_setCarry_result& operator=(const DataProviderService_setCarry_result&);
  DataProviderService_setCarry_result() : success(0) {
  }

  virtual ~DataProviderService_setCarry_result() noexcept;
  bool success;
  DataProviderException ex;

  _DataProviderService_setCarry_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_setCarry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setCarry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setCarry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setCarry_presult__isset {
  _DataProviderService_setCarry_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setCarry_presult__isset;

class DataProviderService_setCarry_presult {
 public:


  virtual ~DataProviderService_setCarry_presult() noexcept;
  bool* success;
  DataProviderException ex;

  _DataProviderService_setCarry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_setShipper_args__isset {
  _DataProviderService_setShipper_args__isset() : part_id(false), car_id(false), shipper(false) {}
  bool part_id :1;
  bool car_id :1;
  bool shipper :1;
} _DataProviderService_setShipper_args__isset;

class DataProviderService_setShipper_args {
 public:

  DataProviderService_setShipper_args(const DataProviderService_setShipper_args&);
  DataProviderService_setShipper_args& operator=(const DataProviderService_setShipper_args&);
  DataProviderService_setShipper_args() : part_id(), car_id(0), shipper(0) {
  }

  virtual ~DataProviderService_setShipper_args() noexcept;
  std::string part_id;
  int car_id;
  int shipper;

  _DataProviderService_setShipper_args__isset __isset;

  void __set_part_id(const std::string& val);

  void __set_car_id(const int val);

  void __set_shipper(const int val);

  bool operator == (const DataProviderService_setShipper_args & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    if (!(car_id == rhs.car_id))
      return false;
    if (!(shipper == rhs.shipper))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setShipper_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setShipper_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_setShipper_pargs {
 public:


  virtual ~DataProviderService_setShipper_pargs() noexcept;
  const std::string* part_id;
  const int* car_id;
  const int* shipper;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setShipper_result__isset {
  _DataProviderService_setShipper_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setShipper_result__isset;

class DataProviderService_setShipper_result {
 public:

  DataProviderService_setShipper_result(const DataProviderService_setShipper_result&);
  DataProviderService_setShipper_result& operator=(const DataProviderService_setShipper_result&);
  DataProviderService_setShipper_result() : success(0) {
  }

  virtual ~DataProviderService_setShipper_result() noexcept;
  bool success;
  DataProviderException ex;

  _DataProviderService_setShipper_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_setShipper_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setShipper_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setShipper_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setShipper_presult__isset {
  _DataProviderService_setShipper_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setShipper_presult__isset;

class DataProviderService_setShipper_presult {
 public:


  virtual ~DataProviderService_setShipper_presult() noexcept;
  bool* success;
  DataProviderException ex;

  _DataProviderService_setShipper_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_setConsigner_args__isset {
  _DataProviderService_setConsigner_args__isset() : part_id(false), car_id(false), consigner(false) {}
  bool part_id :1;
  bool car_id :1;
  bool consigner :1;
} _DataProviderService_setConsigner_args__isset;

class DataProviderService_setConsigner_args {
 public:

  DataProviderService_setConsigner_args(const DataProviderService_setConsigner_args&);
  DataProviderService_setConsigner_args& operator=(const DataProviderService_setConsigner_args&);
  DataProviderService_setConsigner_args() : part_id(), car_id(0), consigner(0) {
  }

  virtual ~DataProviderService_setConsigner_args() noexcept;
  std::string part_id;
  int car_id;
  int consigner;

  _DataProviderService_setConsigner_args__isset __isset;

  void __set_part_id(const std::string& val);

  void __set_car_id(const int val);

  void __set_consigner(const int val);

  bool operator == (const DataProviderService_setConsigner_args & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    if (!(car_id == rhs.car_id))
      return false;
    if (!(consigner == rhs.consigner))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setConsigner_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setConsigner_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_setConsigner_pargs {
 public:


  virtual ~DataProviderService_setConsigner_pargs() noexcept;
  const std::string* part_id;
  const int* car_id;
  const int* consigner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setConsigner_result__isset {
  _DataProviderService_setConsigner_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setConsigner_result__isset;

class DataProviderService_setConsigner_result {
 public:

  DataProviderService_setConsigner_result(const DataProviderService_setConsigner_result&);
  DataProviderService_setConsigner_result& operator=(const DataProviderService_setConsigner_result&);
  DataProviderService_setConsigner_result() : success(0) {
  }

  virtual ~DataProviderService_setConsigner_result() noexcept;
  bool success;
  DataProviderException ex;

  _DataProviderService_setConsigner_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_setConsigner_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setConsigner_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setConsigner_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setConsigner_presult__isset {
  _DataProviderService_setConsigner_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setConsigner_presult__isset;

class DataProviderService_setConsigner_presult {
 public:


  virtual ~DataProviderService_setConsigner_presult() noexcept;
  bool* success;
  DataProviderException ex;

  _DataProviderService_setConsigner_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_setMat_args__isset {
  _DataProviderService_setMat_args__isset() : part_id(false), car_id(false), mat(false) {}
  bool part_id :1;
  bool car_id :1;
  bool mat :1;
} _DataProviderService_setMat_args__isset;

class DataProviderService_setMat_args {
 public:

  DataProviderService_setMat_args(const DataProviderService_setMat_args&);
  DataProviderService_setMat_args& operator=(const DataProviderService_setMat_args&);
  DataProviderService_setMat_args() : part_id(), car_id(0), mat(0) {
  }

  virtual ~DataProviderService_setMat_args() noexcept;
  std::string part_id;
  int car_id;
  int mat;

  _DataProviderService_setMat_args__isset __isset;

  void __set_part_id(const std::string& val);

  void __set_car_id(const int val);

  void __set_mat(const int val);

  bool operator == (const DataProviderService_setMat_args & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    if (!(car_id == rhs.car_id))
      return false;
    if (!(mat == rhs.mat))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setMat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setMat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_setMat_pargs {
 public:


  virtual ~DataProviderService_setMat_pargs() noexcept;
  const std::string* part_id;
  const int* car_id;
  const int* mat;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setMat_result__isset {
  _DataProviderService_setMat_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setMat_result__isset;

class DataProviderService_setMat_result {
 public:

  DataProviderService_setMat_result(const DataProviderService_setMat_result&);
  DataProviderService_setMat_result& operator=(const DataProviderService_setMat_result&);
  DataProviderService_setMat_result() : success(0) {
  }

  virtual ~DataProviderService_setMat_result() noexcept;
  bool success;
  DataProviderException ex;

  _DataProviderService_setMat_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_setMat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setMat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setMat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setMat_presult__isset {
  _DataProviderService_setMat_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setMat_presult__isset;

class DataProviderService_setMat_presult {
 public:


  virtual ~DataProviderService_setMat_presult() noexcept;
  bool* success;
  DataProviderException ex;

  _DataProviderService_setMat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_setCar_args__isset {
  _DataProviderService_setCar_args__isset() : part_id(false), car_id(false), car(false) {}
  bool part_id :1;
  bool car_id :1;
  bool car :1;
} _DataProviderService_setCar_args__isset;

class DataProviderService_setCar_args {
 public:

  DataProviderService_setCar_args(const DataProviderService_setCar_args&);
  DataProviderService_setCar_args& operator=(const DataProviderService_setCar_args&);
  DataProviderService_setCar_args() : part_id(), car_id(0) {
  }

  virtual ~DataProviderService_setCar_args() noexcept;
  std::string part_id;
  int car_id;
  car_t car;

  _DataProviderService_setCar_args__isset __isset;

  void __set_part_id(const std::string& val);

  void __set_car_id(const int val);

  void __set_car(const car_t& val);

  bool operator == (const DataProviderService_setCar_args & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    if (!(car_id == rhs.car_id))
      return false;
    if (!(car == rhs.car))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setCar_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setCar_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_setCar_pargs {
 public:


  virtual ~DataProviderService_setCar_pargs() noexcept;
  const std::string* part_id;
  const int* car_id;
  const car_t* car;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setCar_result__isset {
  _DataProviderService_setCar_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setCar_result__isset;

class DataProviderService_setCar_result {
 public:

  DataProviderService_setCar_result(const DataProviderService_setCar_result&);
  DataProviderService_setCar_result& operator=(const DataProviderService_setCar_result&);
  DataProviderService_setCar_result() : success(0) {
  }

  virtual ~DataProviderService_setCar_result() noexcept;
  bool success;
  DataProviderException ex;

  _DataProviderService_setCar_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_setCar_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_setCar_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_setCar_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_setCar_presult__isset {
  _DataProviderService_setCar_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_setCar_presult__isset;

class DataProviderService_setCar_presult {
 public:


  virtual ~DataProviderService_setCar_presult() noexcept;
  bool* success;
  DataProviderException ex;

  _DataProviderService_setCar_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_startAtt_args__isset {
  _DataProviderService_startAtt_args__isset() : user(false) {}
  bool user :1;
} _DataProviderService_startAtt_args__isset;

class DataProviderService_startAtt_args {
 public:

  DataProviderService_startAtt_args(const DataProviderService_startAtt_args&);
  DataProviderService_startAtt_args& operator=(const DataProviderService_startAtt_args&);
  DataProviderService_startAtt_args() : user() {
  }

  virtual ~DataProviderService_startAtt_args() noexcept;
  std::string user;

  _DataProviderService_startAtt_args__isset __isset;

  void __set_user(const std::string& val);

  bool operator == (const DataProviderService_startAtt_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_startAtt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_startAtt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_startAtt_pargs {
 public:


  virtual ~DataProviderService_startAtt_pargs() noexcept;
  const std::string* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_startAtt_result__isset {
  _DataProviderService_startAtt_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_startAtt_result__isset;

class DataProviderService_startAtt_result {
 public:

  DataProviderService_startAtt_result(const DataProviderService_startAtt_result&);
  DataProviderService_startAtt_result& operator=(const DataProviderService_startAtt_result&);
  DataProviderService_startAtt_result() {
  }

  virtual ~DataProviderService_startAtt_result() noexcept;
  part_t success;
  DataProviderException ex;

  _DataProviderService_startAtt_result__isset __isset;

  void __set_success(const part_t& val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_startAtt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_startAtt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_startAtt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_startAtt_presult__isset {
  _DataProviderService_startAtt_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_startAtt_presult__isset;

class DataProviderService_startAtt_presult {
 public:


  virtual ~DataProviderService_startAtt_presult() noexcept;
  part_t* success;
  DataProviderException ex;

  _DataProviderService_startAtt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_endAtt_args__isset {
  _DataProviderService_endAtt_args__isset() : part_id(false) {}
  bool part_id :1;
} _DataProviderService_endAtt_args__isset;

class DataProviderService_endAtt_args {
 public:

  DataProviderService_endAtt_args(const DataProviderService_endAtt_args&);
  DataProviderService_endAtt_args& operator=(const DataProviderService_endAtt_args&);
  DataProviderService_endAtt_args() : part_id() {
  }

  virtual ~DataProviderService_endAtt_args() noexcept;
  std::string part_id;

  _DataProviderService_endAtt_args__isset __isset;

  void __set_part_id(const std::string& val);

  bool operator == (const DataProviderService_endAtt_args & rhs) const
  {
    if (!(part_id == rhs.part_id))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_endAtt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_endAtt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_endAtt_pargs {
 public:


  virtual ~DataProviderService_endAtt_pargs() noexcept;
  const std::string* part_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_endAtt_result__isset {
  _DataProviderService_endAtt_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_endAtt_result__isset;

class DataProviderService_endAtt_result {
 public:

  DataProviderService_endAtt_result(const DataProviderService_endAtt_result&);
  DataProviderService_endAtt_result& operator=(const DataProviderService_endAtt_result&);
  DataProviderService_endAtt_result() : success(0) {
  }

  virtual ~DataProviderService_endAtt_result() noexcept;
  bool success;
  DataProviderException ex;

  _DataProviderService_endAtt_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_endAtt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_endAtt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_endAtt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_endAtt_presult__isset {
  _DataProviderService_endAtt_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_endAtt_presult__isset;

class DataProviderService_endAtt_presult {
 public:


  virtual ~DataProviderService_endAtt_presult() noexcept;
  bool* success;
  DataProviderException ex;

  _DataProviderService_endAtt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataProviderService_changePass_args__isset {
  _DataProviderService_changePass_args__isset() : login(false), oldPass(false), newPass(false), newEmpl_id(false) {}
  bool login :1;
  bool oldPass :1;
  bool newPass :1;
  bool newEmpl_id :1;
} _DataProviderService_changePass_args__isset;

class DataProviderService_changePass_args {
 public:

  DataProviderService_changePass_args(const DataProviderService_changePass_args&);
  DataProviderService_changePass_args& operator=(const DataProviderService_changePass_args&);
  DataProviderService_changePass_args() : login(), oldPass(), newPass(), newEmpl_id() {
  }

  virtual ~DataProviderService_changePass_args() noexcept;
  std::string login;
  std::string oldPass;
  std::string newPass;
  std::string newEmpl_id;

  _DataProviderService_changePass_args__isset __isset;

  void __set_login(const std::string& val);

  void __set_oldPass(const std::string& val);

  void __set_newPass(const std::string& val);

  void __set_newEmpl_id(const std::string& val);

  bool operator == (const DataProviderService_changePass_args & rhs) const
  {
    if (!(login == rhs.login))
      return false;
    if (!(oldPass == rhs.oldPass))
      return false;
    if (!(newPass == rhs.newPass))
      return false;
    if (!(newEmpl_id == rhs.newEmpl_id))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_changePass_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_changePass_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataProviderService_changePass_pargs {
 public:


  virtual ~DataProviderService_changePass_pargs() noexcept;
  const std::string* login;
  const std::string* oldPass;
  const std::string* newPass;
  const std::string* newEmpl_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_changePass_result__isset {
  _DataProviderService_changePass_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_changePass_result__isset;

class DataProviderService_changePass_result {
 public:

  DataProviderService_changePass_result(const DataProviderService_changePass_result&);
  DataProviderService_changePass_result& operator=(const DataProviderService_changePass_result&);
  DataProviderService_changePass_result() : success(0) {
  }

  virtual ~DataProviderService_changePass_result() noexcept;
  bool success;
  DataProviderException ex;

  _DataProviderService_changePass_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const DataProviderException& val);

  bool operator == (const DataProviderService_changePass_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const DataProviderService_changePass_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataProviderService_changePass_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataProviderService_changePass_presult__isset {
  _DataProviderService_changePass_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _DataProviderService_changePass_presult__isset;

class DataProviderService_changePass_presult {
 public:


  virtual ~DataProviderService_changePass_presult() noexcept;
  bool* success;
  DataProviderException ex;

  _DataProviderService_changePass_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DataProviderServiceClient : virtual public DataProviderServiceIf {
 public:
  DataProviderServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DataProviderServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getCauses(std::vector<cause_t> & _return);
  void send_getCauses();
  void recv_getCauses(std::vector<cause_t> & _return);
  void getContractors(std::vector<contractor_t> & _return);
  void send_getContractors();
  void recv_getContractors(std::vector<contractor_t> & _return);
  void getMat(std::vector<mat_t> & _return);
  void send_getMat();
  void recv_getMat(std::vector<mat_t> & _return);
  void getPhoto(photo_t& _return, const std::string& part_id, const int car_id);
  void send_getPhoto(const std::string& part_id, const int car_id);
  void recv_getPhoto(photo_t& _return);
  void getPart(part_t& _return, const std::string& part_id);
  void send_getPart(const std::string& part_id);
  void recv_getPart(part_t& _return);
  void getUser(std::string& _return, const std::string& login, const std::string& password, const std::string& empl_id);
  void send_getUser(const std::string& login, const std::string& password, const std::string& empl_id);
  void recv_getUser(std::string& _return);
  void getNum(std::string& _return, const std::string& part_id, const int car_id);
  void send_getNum(const std::string& part_id, const int car_id);
  void recv_getNum(std::string& _return);
  void getOldPart(std::string& _return);
  void send_getOldPart();
  void recv_getOldPart(std::string& _return);
  bool setNum(const std::string& part_id, const int car_id, const std::string& num);
  void send_setNum(const std::string& part_id, const int car_id, const std::string& num);
  bool recv_setNum();
  bool setAtt(const std::string& part_id, const int car_id, const int att_code);
  void send_setAtt(const std::string& part_id, const int car_id, const int att_code);
  bool recv_setAtt();
  bool setUser(const std::string& part_id, const std::string& user);
  void send_setUser(const std::string& part_id, const std::string& user);
  bool recv_setUser();
  bool setTara(const std::string& part_id, const int car_id, const double tara);
  void send_setTara(const std::string& part_id, const int car_id, const double tara);
  bool recv_setTara();
  bool setZone(const std::string& part_id, const int car_id, const int zone);
  void send_setZone(const std::string& part_id, const int car_id, const int zone);
  bool recv_setZone();
  bool setCarry(const std::string& part_id, const int car_id, const double carry);
  void send_setCarry(const std::string& part_id, const int car_id, const double carry);
  bool recv_setCarry();
  bool setShipper(const std::string& part_id, const int car_id, const int shipper);
  void send_setShipper(const std::string& part_id, const int car_id, const int shipper);
  bool recv_setShipper();
  bool setConsigner(const std::string& part_id, const int car_id, const int consigner);
  void send_setConsigner(const std::string& part_id, const int car_id, const int consigner);
  bool recv_setConsigner();
  bool setMat(const std::string& part_id, const int car_id, const int mat);
  void send_setMat(const std::string& part_id, const int car_id, const int mat);
  bool recv_setMat();
  bool setCar(const std::string& part_id, const int car_id, const car_t& car);
  void send_setCar(const std::string& part_id, const int car_id, const car_t& car);
  bool recv_setCar();
  void startAtt(part_t& _return, const std::string& user);
  void send_startAtt(const std::string& user);
  void recv_startAtt(part_t& _return);
  bool endAtt(const std::string& part_id);
  void send_endAtt(const std::string& part_id);
  bool recv_endAtt();
  bool changePass(const std::string& login, const std::string& oldPass, const std::string& newPass, const std::string& newEmpl_id);
  void send_changePass(const std::string& login, const std::string& oldPass, const std::string& newPass, const std::string& newEmpl_id);
  bool recv_changePass();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DataProviderServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<DataProviderServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DataProviderServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getCauses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getContractors(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPhoto(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPart(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOldPart(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setNum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setAtt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setTara(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setZone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setCarry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setShipper(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setConsigner(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setMat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setCar(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startAtt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endAtt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changePass(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DataProviderServiceProcessor(::std::shared_ptr<DataProviderServiceIf> iface) :
    iface_(iface) {
    processMap_["getCauses"] = &DataProviderServiceProcessor::process_getCauses;
    processMap_["getContractors"] = &DataProviderServiceProcessor::process_getContractors;
    processMap_["getMat"] = &DataProviderServiceProcessor::process_getMat;
    processMap_["getPhoto"] = &DataProviderServiceProcessor::process_getPhoto;
    processMap_["getPart"] = &DataProviderServiceProcessor::process_getPart;
    processMap_["getUser"] = &DataProviderServiceProcessor::process_getUser;
    processMap_["getNum"] = &DataProviderServiceProcessor::process_getNum;
    processMap_["getOldPart"] = &DataProviderServiceProcessor::process_getOldPart;
    processMap_["setNum"] = &DataProviderServiceProcessor::process_setNum;
    processMap_["setAtt"] = &DataProviderServiceProcessor::process_setAtt;
    processMap_["setUser"] = &DataProviderServiceProcessor::process_setUser;
    processMap_["setTara"] = &DataProviderServiceProcessor::process_setTara;
    processMap_["setZone"] = &DataProviderServiceProcessor::process_setZone;
    processMap_["setCarry"] = &DataProviderServiceProcessor::process_setCarry;
    processMap_["setShipper"] = &DataProviderServiceProcessor::process_setShipper;
    processMap_["setConsigner"] = &DataProviderServiceProcessor::process_setConsigner;
    processMap_["setMat"] = &DataProviderServiceProcessor::process_setMat;
    processMap_["setCar"] = &DataProviderServiceProcessor::process_setCar;
    processMap_["startAtt"] = &DataProviderServiceProcessor::process_startAtt;
    processMap_["endAtt"] = &DataProviderServiceProcessor::process_endAtt;
    processMap_["changePass"] = &DataProviderServiceProcessor::process_changePass;
  }

  virtual ~DataProviderServiceProcessor() {}
};

class DataProviderServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DataProviderServiceProcessorFactory(const ::std::shared_ptr< DataProviderServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< DataProviderServiceIfFactory > handlerFactory_;
};

class DataProviderServiceMultiface : virtual public DataProviderServiceIf {
 public:
  DataProviderServiceMultiface(std::vector<std::shared_ptr<DataProviderServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DataProviderServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<DataProviderServiceIf> > ifaces_;
  DataProviderServiceMultiface() {}
  void add(::std::shared_ptr<DataProviderServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getCauses(std::vector<cause_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCauses(_return);
    }
    ifaces_[i]->getCauses(_return);
    return;
  }

  void getContractors(std::vector<contractor_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getContractors(_return);
    }
    ifaces_[i]->getContractors(_return);
    return;
  }

  void getMat(std::vector<mat_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMat(_return);
    }
    ifaces_[i]->getMat(_return);
    return;
  }

  void getPhoto(photo_t& _return, const std::string& part_id, const int car_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPhoto(_return, part_id, car_id);
    }
    ifaces_[i]->getPhoto(_return, part_id, car_id);
    return;
  }

  void getPart(part_t& _return, const std::string& part_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPart(_return, part_id);
    }
    ifaces_[i]->getPart(_return, part_id);
    return;
  }

  void getUser(std::string& _return, const std::string& login, const std::string& password, const std::string& empl_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUser(_return, login, password, empl_id);
    }
    ifaces_[i]->getUser(_return, login, password, empl_id);
    return;
  }

  void getNum(std::string& _return, const std::string& part_id, const int car_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNum(_return, part_id, car_id);
    }
    ifaces_[i]->getNum(_return, part_id, car_id);
    return;
  }

  void getOldPart(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOldPart(_return);
    }
    ifaces_[i]->getOldPart(_return);
    return;
  }

  bool setNum(const std::string& part_id, const int car_id, const std::string& num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setNum(part_id, car_id, num);
    }
    return ifaces_[i]->setNum(part_id, car_id, num);
  }

  bool setAtt(const std::string& part_id, const int car_id, const int att_code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setAtt(part_id, car_id, att_code);
    }
    return ifaces_[i]->setAtt(part_id, car_id, att_code);
  }

  bool setUser(const std::string& part_id, const std::string& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setUser(part_id, user);
    }
    return ifaces_[i]->setUser(part_id, user);
  }

  bool setTara(const std::string& part_id, const int car_id, const double tara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setTara(part_id, car_id, tara);
    }
    return ifaces_[i]->setTara(part_id, car_id, tara);
  }

  bool setZone(const std::string& part_id, const int car_id, const int zone) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setZone(part_id, car_id, zone);
    }
    return ifaces_[i]->setZone(part_id, car_id, zone);
  }

  bool setCarry(const std::string& part_id, const int car_id, const double carry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setCarry(part_id, car_id, carry);
    }
    return ifaces_[i]->setCarry(part_id, car_id, carry);
  }

  bool setShipper(const std::string& part_id, const int car_id, const int shipper) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setShipper(part_id, car_id, shipper);
    }
    return ifaces_[i]->setShipper(part_id, car_id, shipper);
  }

  bool setConsigner(const std::string& part_id, const int car_id, const int consigner) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setConsigner(part_id, car_id, consigner);
    }
    return ifaces_[i]->setConsigner(part_id, car_id, consigner);
  }

  bool setMat(const std::string& part_id, const int car_id, const int mat) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setMat(part_id, car_id, mat);
    }
    return ifaces_[i]->setMat(part_id, car_id, mat);
  }

  bool setCar(const std::string& part_id, const int car_id, const car_t& car) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setCar(part_id, car_id, car);
    }
    return ifaces_[i]->setCar(part_id, car_id, car);
  }

  void startAtt(part_t& _return, const std::string& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startAtt(_return, user);
    }
    ifaces_[i]->startAtt(_return, user);
    return;
  }

  bool endAtt(const std::string& part_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->endAtt(part_id);
    }
    return ifaces_[i]->endAtt(part_id);
  }

  bool changePass(const std::string& login, const std::string& oldPass, const std::string& newPass, const std::string& newEmpl_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changePass(login, oldPass, newPass, newEmpl_id);
    }
    return ifaces_[i]->changePass(login, oldPass, newPass, newEmpl_id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DataProviderServiceConcurrentClient : virtual public DataProviderServiceIf {
 public:
  DataProviderServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  DataProviderServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getCauses(std::vector<cause_t> & _return);
  int32_t send_getCauses();
  void recv_getCauses(std::vector<cause_t> & _return, const int32_t seqid);
  void getContractors(std::vector<contractor_t> & _return);
  int32_t send_getContractors();
  void recv_getContractors(std::vector<contractor_t> & _return, const int32_t seqid);
  void getMat(std::vector<mat_t> & _return);
  int32_t send_getMat();
  void recv_getMat(std::vector<mat_t> & _return, const int32_t seqid);
  void getPhoto(photo_t& _return, const std::string& part_id, const int car_id);
  int32_t send_getPhoto(const std::string& part_id, const int car_id);
  void recv_getPhoto(photo_t& _return, const int32_t seqid);
  void getPart(part_t& _return, const std::string& part_id);
  int32_t send_getPart(const std::string& part_id);
  void recv_getPart(part_t& _return, const int32_t seqid);
  void getUser(std::string& _return, const std::string& login, const std::string& password, const std::string& empl_id);
  int32_t send_getUser(const std::string& login, const std::string& password, const std::string& empl_id);
  void recv_getUser(std::string& _return, const int32_t seqid);
  void getNum(std::string& _return, const std::string& part_id, const int car_id);
  int32_t send_getNum(const std::string& part_id, const int car_id);
  void recv_getNum(std::string& _return, const int32_t seqid);
  void getOldPart(std::string& _return);
  int32_t send_getOldPart();
  void recv_getOldPart(std::string& _return, const int32_t seqid);
  bool setNum(const std::string& part_id, const int car_id, const std::string& num);
  int32_t send_setNum(const std::string& part_id, const int car_id, const std::string& num);
  bool recv_setNum(const int32_t seqid);
  bool setAtt(const std::string& part_id, const int car_id, const int att_code);
  int32_t send_setAtt(const std::string& part_id, const int car_id, const int att_code);
  bool recv_setAtt(const int32_t seqid);
  bool setUser(const std::string& part_id, const std::string& user);
  int32_t send_setUser(const std::string& part_id, const std::string& user);
  bool recv_setUser(const int32_t seqid);
  bool setTara(const std::string& part_id, const int car_id, const double tara);
  int32_t send_setTara(const std::string& part_id, const int car_id, const double tara);
  bool recv_setTara(const int32_t seqid);
  bool setZone(const std::string& part_id, const int car_id, const int zone);
  int32_t send_setZone(const std::string& part_id, const int car_id, const int zone);
  bool recv_setZone(const int32_t seqid);
  bool setCarry(const std::string& part_id, const int car_id, const double carry);
  int32_t send_setCarry(const std::string& part_id, const int car_id, const double carry);
  bool recv_setCarry(const int32_t seqid);
  bool setShipper(const std::string& part_id, const int car_id, const int shipper);
  int32_t send_setShipper(const std::string& part_id, const int car_id, const int shipper);
  bool recv_setShipper(const int32_t seqid);
  bool setConsigner(const std::string& part_id, const int car_id, const int consigner);
  int32_t send_setConsigner(const std::string& part_id, const int car_id, const int consigner);
  bool recv_setConsigner(const int32_t seqid);
  bool setMat(const std::string& part_id, const int car_id, const int mat);
  int32_t send_setMat(const std::string& part_id, const int car_id, const int mat);
  bool recv_setMat(const int32_t seqid);
  bool setCar(const std::string& part_id, const int car_id, const car_t& car);
  int32_t send_setCar(const std::string& part_id, const int car_id, const car_t& car);
  bool recv_setCar(const int32_t seqid);
  void startAtt(part_t& _return, const std::string& user);
  int32_t send_startAtt(const std::string& user);
  void recv_startAtt(part_t& _return, const int32_t seqid);
  bool endAtt(const std::string& part_id);
  int32_t send_endAtt(const std::string& part_id);
  bool recv_endAtt(const int32_t seqid);
  bool changePass(const std::string& login, const std::string& oldPass, const std::string& newPass, const std::string& newEmpl_id);
  int32_t send_changePass(const std::string& login, const std::string& oldPass, const std::string& newPass, const std::string& newEmpl_id);
  bool recv_changePass(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
