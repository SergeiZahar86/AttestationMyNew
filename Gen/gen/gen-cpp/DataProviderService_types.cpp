/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DataProviderService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




DataProviderException::~DataProviderException() noexcept {
}


void DataProviderException::__set_message(const std::string& val) {
  this->message = val;
}

void DataProviderException::__set_error_code(const int val) {
  this->error_code = val;
}
std::ostream& operator<<(std::ostream& out, const DataProviderException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DataProviderException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataProviderException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataProviderException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DataProviderException &a, DataProviderException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.error_code, b.error_code);
  swap(a.__isset, b.__isset);
}

DataProviderException::DataProviderException(const DataProviderException& other0) : TException() {
  message = other0.message;
  error_code = other0.error_code;
  __isset = other0.__isset;
}
DataProviderException& DataProviderException::operator=(const DataProviderException& other1) {
  message = other1.message;
  error_code = other1.error_code;
  __isset = other1.__isset;
  return *this;
}
void DataProviderException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DataProviderException(";
  out << "message=" << to_string(message);
  out << ", " << "error_code=" << to_string(error_code);
  out << ")";
}

const char* DataProviderException::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: DataProviderException";
  }
}


cause_t::~cause_t() noexcept {
}


void cause_t::__set_id(const int val) {
  this->id = val;
}

void cause_t::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const cause_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t cause_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t cause_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("cause_t");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(cause_t &a, cause_t &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

cause_t::cause_t(const cause_t& other2) {
  id = other2.id;
  name = other2.name;
  __isset = other2.__isset;
}
cause_t& cause_t::operator=(const cause_t& other3) {
  id = other3.id;
  name = other3.name;
  __isset = other3.__isset;
  return *this;
}
void cause_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "cause_t(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


contractor_t::~contractor_t() noexcept {
}


void contractor_t::__set_id(const int val) {
  this->id = val;
}

void contractor_t::__set_name(const std::string& val) {
  this->name = val;
}

void contractor_t::__set_shipper(const bool val) {
  this->shipper = val;
}

void contractor_t::__set_consigner(const bool val) {
  this->consigner = val;
}
std::ostream& operator<<(std::ostream& out, const contractor_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t contractor_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->shipper);
          this->__isset.shipper = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->consigner);
          this->__isset.consigner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t contractor_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("contractor_t");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shipper", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->shipper);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("consigner", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->consigner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(contractor_t &a, contractor_t &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.shipper, b.shipper);
  swap(a.consigner, b.consigner);
  swap(a.__isset, b.__isset);
}

contractor_t::contractor_t(const contractor_t& other4) {
  id = other4.id;
  name = other4.name;
  shipper = other4.shipper;
  consigner = other4.consigner;
  __isset = other4.__isset;
}
contractor_t& contractor_t::operator=(const contractor_t& other5) {
  id = other5.id;
  name = other5.name;
  shipper = other5.shipper;
  consigner = other5.consigner;
  __isset = other5.__isset;
  return *this;
}
void contractor_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "contractor_t(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "shipper=" << to_string(shipper);
  out << ", " << "consigner=" << to_string(consigner);
  out << ")";
}


mat_t::~mat_t() noexcept {
}


void mat_t::__set_id(const int val) {
  this->id = val;
}

void mat_t::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const mat_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t mat_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t mat_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("mat_t");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(mat_t &a, mat_t &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

mat_t::mat_t(const mat_t& other6) {
  id = other6.id;
  name = other6.name;
  __isset = other6.__isset;
}
mat_t& mat_t::operator=(const mat_t& other7) {
  id = other7.id;
  name = other7.name;
  __isset = other7.__isset;
  return *this;
}
void mat_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "mat_t(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


car_t::~car_t() noexcept {
}


void car_t::__set_part_id(const std::string& val) {
  this->part_id = val;
}

void car_t::__set_car_id(const int val) {
  this->car_id = val;
}

void car_t::__set_num(const std::string& val) {
  this->num = val;
}

void car_t::__set_shipper(const int val) {
  this->shipper = val;
}

void car_t::__set_consigner(const int val) {
  this->consigner = val;
}

void car_t::__set_mat(const int val) {
  this->mat = val;
}

void car_t::__set_att_code(const int val) {
  this->att_code = val;
}

void car_t::__set_tara(const double val) {
  this->tara = val;
}

void car_t::__set_tara_e(const double val) {
  this->tara_e = val;
}

void car_t::__set_zone_e(const int val) {
  this->zone_e = val;
}

void car_t::__set_cause_id(const int val) {
  this->cause_id = val;
}

void car_t::__set_carrying_e(const double val) {
  this->carrying_e = val;
}

void car_t::__set_att_time(const std::string& val) {
  this->att_time = val;
}
std::ostream& operator<<(std::ostream& out, const car_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t car_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->part_id);
          this->__isset.part_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->car_id);
          this->__isset.car_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->num);
          this->__isset.num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->shipper);
          this->__isset.shipper = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->consigner);
          this->__isset.consigner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mat);
          this->__isset.mat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att_code);
          this->__isset.att_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tara);
          this->__isset.tara = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tara_e);
          this->__isset.tara_e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zone_e);
          this->__isset.zone_e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cause_id);
          this->__isset.cause_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->carrying_e);
          this->__isset.carrying_e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att_time);
          this->__isset.att_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t car_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("car_t");

  xfer += oprot->writeFieldBegin("part_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->part_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("car_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->car_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shipper", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->shipper);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("consigner", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->consigner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mat", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->mat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att_code", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->att_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tara", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->tara);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tara_e", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->tara_e);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zone_e", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->zone_e);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cause_id", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->cause_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("carrying_e", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->carrying_e);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att_time", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->att_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(car_t &a, car_t &b) {
  using ::std::swap;
  swap(a.part_id, b.part_id);
  swap(a.car_id, b.car_id);
  swap(a.num, b.num);
  swap(a.shipper, b.shipper);
  swap(a.consigner, b.consigner);
  swap(a.mat, b.mat);
  swap(a.att_code, b.att_code);
  swap(a.tara, b.tara);
  swap(a.tara_e, b.tara_e);
  swap(a.zone_e, b.zone_e);
  swap(a.cause_id, b.cause_id);
  swap(a.carrying_e, b.carrying_e);
  swap(a.att_time, b.att_time);
  swap(a.__isset, b.__isset);
}

car_t::car_t(const car_t& other8) {
  part_id = other8.part_id;
  car_id = other8.car_id;
  num = other8.num;
  shipper = other8.shipper;
  consigner = other8.consigner;
  mat = other8.mat;
  att_code = other8.att_code;
  tara = other8.tara;
  tara_e = other8.tara_e;
  zone_e = other8.zone_e;
  cause_id = other8.cause_id;
  carrying_e = other8.carrying_e;
  att_time = other8.att_time;
  __isset = other8.__isset;
}
car_t& car_t::operator=(const car_t& other9) {
  part_id = other9.part_id;
  car_id = other9.car_id;
  num = other9.num;
  shipper = other9.shipper;
  consigner = other9.consigner;
  mat = other9.mat;
  att_code = other9.att_code;
  tara = other9.tara;
  tara_e = other9.tara_e;
  zone_e = other9.zone_e;
  cause_id = other9.cause_id;
  carrying_e = other9.carrying_e;
  att_time = other9.att_time;
  __isset = other9.__isset;
  return *this;
}
void car_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "car_t(";
  out << "part_id=" << to_string(part_id);
  out << ", " << "car_id=" << to_string(car_id);
  out << ", " << "num=" << to_string(num);
  out << ", " << "shipper=" << to_string(shipper);
  out << ", " << "consigner=" << to_string(consigner);
  out << ", " << "mat=" << to_string(mat);
  out << ", " << "att_code=" << to_string(att_code);
  out << ", " << "tara=" << to_string(tara);
  out << ", " << "tara_e=" << to_string(tara_e);
  out << ", " << "zone_e=" << to_string(zone_e);
  out << ", " << "cause_id=" << to_string(cause_id);
  out << ", " << "carrying_e=" << to_string(carrying_e);
  out << ", " << "att_time=" << to_string(att_time);
  out << ")";
}


part_t::~part_t() noexcept {
}


void part_t::__set_part_id(const std::string& val) {
  this->part_id = val;
}

void part_t::__set_oper(const std::string& val) {
  this->oper = val;
}

void part_t::__set_cars(const std::vector<car_t> & val) {
  this->cars = val;
}

void part_t::__set_start_time(const std::string& val) {
  this->start_time = val;
}

void part_t::__set_end_time(const std::string& val) {
  this->end_time = val;
}
std::ostream& operator<<(std::ostream& out, const part_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t part_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->part_id);
          this->__isset.part_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->oper);
          this->__isset.oper = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cars.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->cars.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += this->cars[_i14].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.cars = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->start_time);
          this->__isset.start_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->end_time);
          this->__isset.end_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t part_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("part_t");

  xfer += oprot->writeFieldBegin("part_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->part_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oper", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->oper);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cars", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->cars.size()));
    std::vector<car_t> ::const_iterator _iter15;
    for (_iter15 = this->cars.begin(); _iter15 != this->cars.end(); ++_iter15)
    {
      xfer += (*_iter15).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_time", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->start_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_time", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->end_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(part_t &a, part_t &b) {
  using ::std::swap;
  swap(a.part_id, b.part_id);
  swap(a.oper, b.oper);
  swap(a.cars, b.cars);
  swap(a.start_time, b.start_time);
  swap(a.end_time, b.end_time);
  swap(a.__isset, b.__isset);
}

part_t::part_t(const part_t& other16) {
  part_id = other16.part_id;
  oper = other16.oper;
  cars = other16.cars;
  start_time = other16.start_time;
  end_time = other16.end_time;
  __isset = other16.__isset;
}
part_t& part_t::operator=(const part_t& other17) {
  part_id = other17.part_id;
  oper = other17.oper;
  cars = other17.cars;
  start_time = other17.start_time;
  end_time = other17.end_time;
  __isset = other17.__isset;
  return *this;
}
void part_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "part_t(";
  out << "part_id=" << to_string(part_id);
  out << ", " << "oper=" << to_string(oper);
  out << ", " << "cars=" << to_string(cars);
  out << ", " << "start_time=" << to_string(start_time);
  out << ", " << "end_time=" << to_string(end_time);
  out << ")";
}


photo_t::~photo_t() noexcept {
}


void photo_t::__set_left(const std::string& val) {
  this->left = val;
}

void photo_t::__set_right(const std::string& val) {
  this->right = val;
}

void photo_t::__set_top(const std::string& val) {
  this->top = val;
}
std::ostream& operator<<(std::ostream& out, const photo_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t photo_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->left);
          this->__isset.left = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->right);
          this->__isset.right = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->top);
          this->__isset.top = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t photo_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("photo_t");

  xfer += oprot->writeFieldBegin("left", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->left);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("right", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->right);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("top", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->top);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(photo_t &a, photo_t &b) {
  using ::std::swap;
  swap(a.left, b.left);
  swap(a.right, b.right);
  swap(a.top, b.top);
  swap(a.__isset, b.__isset);
}

photo_t::photo_t(const photo_t& other18) {
  left = other18.left;
  right = other18.right;
  top = other18.top;
  __isset = other18.__isset;
}
photo_t& photo_t::operator=(const photo_t& other19) {
  left = other19.left;
  right = other19.right;
  top = other19.top;
  __isset = other19.__isset;
  return *this;
}
void photo_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "photo_t(";
  out << "left=" << to_string(left);
  out << ", " << "right=" << to_string(right);
  out << ", " << "top=" << to_string(top);
  out << ")";
}


