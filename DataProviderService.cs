/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class DataProviderService {
  public interface ISync {
    List<cause_t> getCauses();
    List<contractor_t> getContractors();
    List<mat_t> getMat();
    photo_t getPhoto(int part_id, int car_id);
    part_t getPart(int id);
    string getUser(string login, string password, string empl_id);
    string getNum(int part_id, int car_id);
    bool setNum(int part_id, int car_id, string num);
    bool setAtt(int part_id, int car_id, int att_code);
    bool setUser(int part_id, string user);
    bool exitAtt();
    part_t beginAtt(int shipper, int consignee, int mat, string user);
    bool changePass(string login, string oldPass, string newPass, string newEmpl_id);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_getCauses(AsyncCallback callback, object state);
    List<cause_t> End_getCauses(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getContractors(AsyncCallback callback, object state);
    List<contractor_t> End_getContractors(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMat(AsyncCallback callback, object state);
    List<mat_t> End_getMat(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPhoto(AsyncCallback callback, object state, int part_id, int car_id);
    photo_t End_getPhoto(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPart(AsyncCallback callback, object state, int id);
    part_t End_getPart(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUser(AsyncCallback callback, object state, string login, string password, string empl_id);
    string End_getUser(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getNum(AsyncCallback callback, object state, int part_id, int car_id);
    string End_getNum(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setNum(AsyncCallback callback, object state, int part_id, int car_id, string num);
    bool End_setNum(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setAtt(AsyncCallback callback, object state, int part_id, int car_id, int att_code);
    bool End_setAtt(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setUser(AsyncCallback callback, object state, int part_id, string user);
    bool End_setUser(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_exitAtt(AsyncCallback callback, object state);
    bool End_exitAtt(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_beginAtt(AsyncCallback callback, object state, int shipper, int consignee, int mat, string user);
    part_t End_beginAtt(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_changePass(AsyncCallback callback, object state, string login, string oldPass, string newPass, string newEmpl_id);
    bool End_changePass(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getCauses(AsyncCallback callback, object state)
    {
      return send_getCauses(callback, state);
    }

    public List<cause_t> End_getCauses(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCauses();
    }

    #endif

    public List<cause_t> getCauses()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getCauses(null, null);
      return End_getCauses(asyncResult);

      #else
      send_getCauses();
      return recv_getCauses();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCauses(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getCauses", TMessageType.Call, seqid_));
      getCauses_args args = new getCauses_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getCauses()
    {
      oprot_.WriteMessageBegin(new TMessage("getCauses", TMessageType.Call, seqid_));
      getCauses_args args = new getCauses_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<cause_t> recv_getCauses()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCauses_result result = new getCauses_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCauses failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getContractors(AsyncCallback callback, object state)
    {
      return send_getContractors(callback, state);
    }

    public List<contractor_t> End_getContractors(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getContractors();
    }

    #endif

    public List<contractor_t> getContractors()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getContractors(null, null);
      return End_getContractors(asyncResult);

      #else
      send_getContractors();
      return recv_getContractors();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getContractors(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getContractors", TMessageType.Call, seqid_));
      getContractors_args args = new getContractors_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getContractors()
    {
      oprot_.WriteMessageBegin(new TMessage("getContractors", TMessageType.Call, seqid_));
      getContractors_args args = new getContractors_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<contractor_t> recv_getContractors()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getContractors_result result = new getContractors_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContractors failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMat(AsyncCallback callback, object state)
    {
      return send_getMat(callback, state);
    }

    public List<mat_t> End_getMat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMat();
    }

    #endif

    public List<mat_t> getMat()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMat(null, null);
      return End_getMat(asyncResult);

      #else
      send_getMat();
      return recv_getMat();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMat(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getMat", TMessageType.Call, seqid_));
      getMat_args args = new getMat_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMat()
    {
      oprot_.WriteMessageBegin(new TMessage("getMat", TMessageType.Call, seqid_));
      getMat_args args = new getMat_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<mat_t> recv_getMat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMat_result result = new getMat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMat failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPhoto(AsyncCallback callback, object state, int part_id, int car_id)
    {
      return send_getPhoto(callback, state, part_id, car_id);
    }

    public photo_t End_getPhoto(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPhoto();
    }

    #endif

    public photo_t getPhoto(int part_id, int car_id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPhoto(null, null, part_id, car_id);
      return End_getPhoto(asyncResult);

      #else
      send_getPhoto(part_id, car_id);
      return recv_getPhoto();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPhoto(AsyncCallback callback, object state, int part_id, int car_id)
    {
      oprot_.WriteMessageBegin(new TMessage("getPhoto", TMessageType.Call, seqid_));
      getPhoto_args args = new getPhoto_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPhoto(int part_id, int car_id)
    {
      oprot_.WriteMessageBegin(new TMessage("getPhoto", TMessageType.Call, seqid_));
      getPhoto_args args = new getPhoto_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public photo_t recv_getPhoto()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPhoto_result result = new getPhoto_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPhoto failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPart(AsyncCallback callback, object state, int id)
    {
      return send_getPart(callback, state, id);
    }

    public part_t End_getPart(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPart();
    }

    #endif

    public part_t getPart(int id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPart(null, null, id);
      return End_getPart(asyncResult);

      #else
      send_getPart(id);
      return recv_getPart();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPart(AsyncCallback callback, object state, int id)
    {
      oprot_.WriteMessageBegin(new TMessage("getPart", TMessageType.Call, seqid_));
      getPart_args args = new getPart_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPart(int id)
    {
      oprot_.WriteMessageBegin(new TMessage("getPart", TMessageType.Call, seqid_));
      getPart_args args = new getPart_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public part_t recv_getPart()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPart_result result = new getPart_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPart failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUser(AsyncCallback callback, object state, string login, string password, string empl_id)
    {
      return send_getUser(callback, state, login, password, empl_id);
    }

    public string End_getUser(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUser();
    }

    #endif

    public string getUser(string login, string password, string empl_id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUser(null, null, login, password, empl_id);
      return End_getUser(asyncResult);

      #else
      send_getUser(login, password, empl_id);
      return recv_getUser();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUser(AsyncCallback callback, object state, string login, string password, string empl_id)
    {
      oprot_.WriteMessageBegin(new TMessage("getUser", TMessageType.Call, seqid_));
      getUser_args args = new getUser_args();
      args.Login = login;
      args.Password = password;
      args.Empl_id = empl_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUser(string login, string password, string empl_id)
    {
      oprot_.WriteMessageBegin(new TMessage("getUser", TMessageType.Call, seqid_));
      getUser_args args = new getUser_args();
      args.Login = login;
      args.Password = password;
      args.Empl_id = empl_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getUser()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUser_result result = new getUser_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUser failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getNum(AsyncCallback callback, object state, int part_id, int car_id)
    {
      return send_getNum(callback, state, part_id, car_id);
    }

    public string End_getNum(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getNum();
    }

    #endif

    public string getNum(int part_id, int car_id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getNum(null, null, part_id, car_id);
      return End_getNum(asyncResult);

      #else
      send_getNum(part_id, car_id);
      return recv_getNum();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getNum(AsyncCallback callback, object state, int part_id, int car_id)
    {
      oprot_.WriteMessageBegin(new TMessage("getNum", TMessageType.Call, seqid_));
      getNum_args args = new getNum_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getNum(int part_id, int car_id)
    {
      oprot_.WriteMessageBegin(new TMessage("getNum", TMessageType.Call, seqid_));
      getNum_args args = new getNum_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getNum()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getNum_result result = new getNum_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNum failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setNum(AsyncCallback callback, object state, int part_id, int car_id, string num)
    {
      return send_setNum(callback, state, part_id, car_id, num);
    }

    public bool End_setNum(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setNum();
    }

    #endif

    public bool setNum(int part_id, int car_id, string num)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setNum(null, null, part_id, car_id, num);
      return End_setNum(asyncResult);

      #else
      send_setNum(part_id, car_id, num);
      return recv_setNum();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setNum(AsyncCallback callback, object state, int part_id, int car_id, string num)
    {
      oprot_.WriteMessageBegin(new TMessage("setNum", TMessageType.Call, seqid_));
      setNum_args args = new setNum_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setNum(int part_id, int car_id, string num)
    {
      oprot_.WriteMessageBegin(new TMessage("setNum", TMessageType.Call, seqid_));
      setNum_args args = new setNum_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_setNum()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setNum_result result = new setNum_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setNum failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setAtt(AsyncCallback callback, object state, int part_id, int car_id, int att_code)
    {
      return send_setAtt(callback, state, part_id, car_id, att_code);
    }

    public bool End_setAtt(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setAtt();
    }

    #endif

    public bool setAtt(int part_id, int car_id, int att_code)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setAtt(null, null, part_id, car_id, att_code);
      return End_setAtt(asyncResult);

      #else
      send_setAtt(part_id, car_id, att_code);
      return recv_setAtt();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setAtt(AsyncCallback callback, object state, int part_id, int car_id, int att_code)
    {
      oprot_.WriteMessageBegin(new TMessage("setAtt", TMessageType.Call, seqid_));
      setAtt_args args = new setAtt_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Att_code = att_code;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setAtt(int part_id, int car_id, int att_code)
    {
      oprot_.WriteMessageBegin(new TMessage("setAtt", TMessageType.Call, seqid_));
      setAtt_args args = new setAtt_args();
      args.Part_id = part_id;
      args.Car_id = car_id;
      args.Att_code = att_code;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_setAtt()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setAtt_result result = new setAtt_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setAtt failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setUser(AsyncCallback callback, object state, int part_id, string user)
    {
      return send_setUser(callback, state, part_id, user);
    }

    public bool End_setUser(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setUser();
    }

    #endif

    public bool setUser(int part_id, string user)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setUser(null, null, part_id, user);
      return End_setUser(asyncResult);

      #else
      send_setUser(part_id, user);
      return recv_setUser();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setUser(AsyncCallback callback, object state, int part_id, string user)
    {
      oprot_.WriteMessageBegin(new TMessage("setUser", TMessageType.Call, seqid_));
      setUser_args args = new setUser_args();
      args.Part_id = part_id;
      args.User = user;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setUser(int part_id, string user)
    {
      oprot_.WriteMessageBegin(new TMessage("setUser", TMessageType.Call, seqid_));
      setUser_args args = new setUser_args();
      args.Part_id = part_id;
      args.User = user;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_setUser()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setUser_result result = new setUser_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setUser failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_exitAtt(AsyncCallback callback, object state)
    {
      return send_exitAtt(callback, state);
    }

    public bool End_exitAtt(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_exitAtt();
    }

    #endif

    public bool exitAtt()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_exitAtt(null, null);
      return End_exitAtt(asyncResult);

      #else
      send_exitAtt();
      return recv_exitAtt();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_exitAtt(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("exitAtt", TMessageType.Call, seqid_));
      exitAtt_args args = new exitAtt_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_exitAtt()
    {
      oprot_.WriteMessageBegin(new TMessage("exitAtt", TMessageType.Call, seqid_));
      exitAtt_args args = new exitAtt_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_exitAtt()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      exitAtt_result result = new exitAtt_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exitAtt failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_beginAtt(AsyncCallback callback, object state, int shipper, int consignee, int mat, string user)
    {
      return send_beginAtt(callback, state, shipper, consignee, mat, user);
    }

    public part_t End_beginAtt(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_beginAtt();
    }

    #endif

    public part_t beginAtt(int shipper, int consignee, int mat, string user)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_beginAtt(null, null, shipper, consignee, mat, user);
      return End_beginAtt(asyncResult);

      #else
      send_beginAtt(shipper, consignee, mat, user);
      return recv_beginAtt();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_beginAtt(AsyncCallback callback, object state, int shipper, int consignee, int mat, string user)
    {
      oprot_.WriteMessageBegin(new TMessage("beginAtt", TMessageType.Call, seqid_));
      beginAtt_args args = new beginAtt_args();
      args.Shipper = shipper;
      args.Consignee = consignee;
      args.Mat = mat;
      args.User = user;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_beginAtt(int shipper, int consignee, int mat, string user)
    {
      oprot_.WriteMessageBegin(new TMessage("beginAtt", TMessageType.Call, seqid_));
      beginAtt_args args = new beginAtt_args();
      args.Shipper = shipper;
      args.Consignee = consignee;
      args.Mat = mat;
      args.User = user;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public part_t recv_beginAtt()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      beginAtt_result result = new beginAtt_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "beginAtt failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_changePass(AsyncCallback callback, object state, string login, string oldPass, string newPass, string newEmpl_id)
    {
      return send_changePass(callback, state, login, oldPass, newPass, newEmpl_id);
    }

    public bool End_changePass(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_changePass();
    }

    #endif

    public bool changePass(string login, string oldPass, string newPass, string newEmpl_id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_changePass(null, null, login, oldPass, newPass, newEmpl_id);
      return End_changePass(asyncResult);

      #else
      send_changePass(login, oldPass, newPass, newEmpl_id);
      return recv_changePass();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_changePass(AsyncCallback callback, object state, string login, string oldPass, string newPass, string newEmpl_id)
    {
      oprot_.WriteMessageBegin(new TMessage("changePass", TMessageType.Call, seqid_));
      changePass_args args = new changePass_args();
      args.Login = login;
      args.OldPass = oldPass;
      args.NewPass = newPass;
      args.NewEmpl_id = newEmpl_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_changePass(string login, string oldPass, string newPass, string newEmpl_id)
    {
      oprot_.WriteMessageBegin(new TMessage("changePass", TMessageType.Call, seqid_));
      changePass_args args = new changePass_args();
      args.Login = login;
      args.OldPass = oldPass;
      args.NewPass = newPass;
      args.NewEmpl_id = newEmpl_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_changePass()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      changePass_result result = new changePass_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "changePass failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["getCauses"] = getCauses_Process;
      processMap_["getContractors"] = getContractors_Process;
      processMap_["getMat"] = getMat_Process;
      processMap_["getPhoto"] = getPhoto_Process;
      processMap_["getPart"] = getPart_Process;
      processMap_["getUser"] = getUser_Process;
      processMap_["getNum"] = getNum_Process;
      processMap_["setNum"] = setNum_Process;
      processMap_["setAtt"] = setAtt_Process;
      processMap_["setUser"] = setUser_Process;
      processMap_["exitAtt"] = exitAtt_Process;
      processMap_["beginAtt"] = beginAtt_Process;
      processMap_["changePass"] = changePass_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getCauses_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCauses_args args = new getCauses_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCauses_result result = new getCauses_result();
      try
      {
        try
        {
          result.Success = iface_.getCauses();
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getCauses", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCauses", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getContractors_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getContractors_args args = new getContractors_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getContractors_result result = new getContractors_result();
      try
      {
        try
        {
          result.Success = iface_.getContractors();
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getContractors", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getContractors", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMat_args args = new getMat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMat_result result = new getMat_result();
      try
      {
        try
        {
          result.Success = iface_.getMat();
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getMat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMat", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPhoto_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPhoto_args args = new getPhoto_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPhoto_result result = new getPhoto_result();
      try
      {
        try
        {
          result.Success = iface_.getPhoto(args.Part_id, args.Car_id);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getPhoto", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPhoto", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPart_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPart_args args = new getPart_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPart_result result = new getPart_result();
      try
      {
        try
        {
          result.Success = iface_.getPart(args.Id);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getPart", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPart", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUser_args args = new getUser_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUser_result result = new getUser_result();
      try
      {
        try
        {
          result.Success = iface_.getUser(args.Login, args.Password, args.Empl_id);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUser", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getNum_args args = new getNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getNum_result result = new getNum_result();
      try
      {
        try
        {
          result.Success = iface_.getNum(args.Part_id, args.Car_id);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("getNum", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getNum", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setNum_args args = new setNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setNum_result result = new setNum_result();
      try
      {
        try
        {
          result.Success = iface_.setNum(args.Part_id, args.Car_id, args.Num);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("setNum", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setNum", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setAtt_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setAtt_args args = new setAtt_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setAtt_result result = new setAtt_result();
      try
      {
        try
        {
          result.Success = iface_.setAtt(args.Part_id, args.Car_id, args.Att_code);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("setAtt", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setAtt", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setUser_args args = new setUser_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setUser_result result = new setUser_result();
      try
      {
        try
        {
          result.Success = iface_.setUser(args.Part_id, args.User);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("setUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setUser", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void exitAtt_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      exitAtt_args args = new exitAtt_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      exitAtt_result result = new exitAtt_result();
      try
      {
        try
        {
          result.Success = iface_.exitAtt();
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("exitAtt", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("exitAtt", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void beginAtt_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      beginAtt_args args = new beginAtt_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      beginAtt_result result = new beginAtt_result();
      try
      {
        try
        {
          result.Success = iface_.beginAtt(args.Shipper, args.Consignee, args.Mat, args.User);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("beginAtt", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("beginAtt", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void changePass_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      changePass_args args = new changePass_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      changePass_result result = new changePass_result();
      try
      {
        try
        {
          result.Success = iface_.changePass(args.Login, args.OldPass, args.NewPass, args.NewEmpl_id);
        }
        catch (DataProviderException ex)
        {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("changePass", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("changePass", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCauses_args : TBase
  {

    public getCauses_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCauses_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCauses_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCauses_result : TBase
  {
    private List<cause_t> _success;
    private DataProviderException _ex;

    public List<cause_t> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getCauses_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<cause_t>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    cause_t _elem6;
                    _elem6 = new cause_t();
                    _elem6.Read(iprot);
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCauses_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (cause_t _iter7 in Success)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCauses_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getContractors_args : TBase
  {

    public getContractors_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getContractors_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getContractors_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getContractors_result : TBase
  {
    private List<contractor_t> _success;
    private DataProviderException _ex;

    public List<contractor_t> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getContractors_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<contractor_t>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    contractor_t _elem10;
                    _elem10 = new contractor_t();
                    _elem10.Read(iprot);
                    Success.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getContractors_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (contractor_t _iter11 in Success)
              {
                _iter11.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getContractors_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMat_args : TBase
  {

    public getMat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMat_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMat_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMat_result : TBase
  {
    private List<mat_t> _success;
    private DataProviderException _ex;

    public List<mat_t> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getMat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<mat_t>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    mat_t _elem14;
                    _elem14 = new mat_t();
                    _elem14.Read(iprot);
                    Success.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (mat_t _iter15 in Success)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMat_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPhoto_args : TBase
  {
    private int _part_id;
    private int _car_id;

    public int Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
    }

    public getPhoto_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Part_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPhoto_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPhoto_args(");
      bool __first = true;
      if (__isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPhoto_result : TBase
  {
    private photo_t _success;
    private DataProviderException _ex;

    public photo_t Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getPhoto_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new photo_t();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPhoto_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPhoto_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPart_args : TBase
  {
    private int _id;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public getPart_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPart_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPart_args(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPart_result : TBase
  {
    private part_t _success;
    private DataProviderException _ex;

    public part_t Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getPart_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new part_t();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPart_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPart_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUser_args : TBase
  {
    private string _login;
    private string _password;
    private string _empl_id;

    public string Login
    {
      get
      {
        return _login;
      }
      set
      {
        __isset.login = true;
        this._login = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }

    public string Empl_id
    {
      get
      {
        return _empl_id;
      }
      set
      {
        __isset.empl_id = true;
        this._empl_id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool login;
      public bool password;
      public bool empl_id;
    }

    public getUser_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Empl_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        if (Empl_id != null && __isset.empl_id) {
          field.Name = "empl_id";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Empl_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUser_args(");
      bool __first = true;
      if (Login != null && __isset.login) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Login: ");
        __sb.Append(Login);
      }
      if (Password != null && __isset.password) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Password: ");
        __sb.Append(Password);
      }
      if (Empl_id != null && __isset.empl_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Empl_id: ");
        __sb.Append(Empl_id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUser_result : TBase
  {
    private string _success;
    private DataProviderException _ex;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getUser_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUser_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNum_args : TBase
  {
    private int _part_id;
    private int _car_id;

    public int Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
    }

    public getNum_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Part_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getNum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNum_args(");
      bool __first = true;
      if (__isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNum_result : TBase
  {
    private string _success;
    private DataProviderException _ex;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public getNum_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getNum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNum_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setNum_args : TBase
  {
    private int _part_id;
    private int _car_id;
    private string _num;

    public int Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }

    public string Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
      public bool num;
    }

    public setNum_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Part_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Num = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setNum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        if (Num != null && __isset.num) {
          field.Name = "num";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setNum_args(");
      bool __first = true;
      if (__isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      if (Num != null && __isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setNum_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public setNum_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setNum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setNum_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setAtt_args : TBase
  {
    private int _part_id;
    private int _car_id;
    private int _att_code;

    public int Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public int Car_id
    {
      get
      {
        return _car_id;
      }
      set
      {
        __isset.car_id = true;
        this._car_id = value;
      }
    }

    public int Att_code
    {
      get
      {
        return _att_code;
      }
      set
      {
        __isset.att_code = true;
        this._att_code = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool car_id;
      public bool att_code;
    }

    public setAtt_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Part_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Car_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Att_code = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setAtt_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Part_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.car_id) {
          field.Name = "car_id";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Car_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.att_code) {
          field.Name = "att_code";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Att_code);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setAtt_args(");
      bool __first = true;
      if (__isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (__isset.car_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Car_id: ");
        __sb.Append(Car_id);
      }
      if (__isset.att_code) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Att_code: ");
        __sb.Append(Att_code);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setAtt_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public setAtt_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setAtt_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setAtt_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setUser_args : TBase
  {
    private int _part_id;
    private string _user;

    public int Part_id
    {
      get
      {
        return _part_id;
      }
      set
      {
        __isset.part_id = true;
        this._part_id = value;
      }
    }

    public string User
    {
      get
      {
        return _user;
      }
      set
      {
        __isset.user = true;
        this._user = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool part_id;
      public bool user;
    }

    public setUser_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Part_id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                User = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.part_id) {
          field.Name = "part_id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Part_id);
          oprot.WriteFieldEnd();
        }
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setUser_args(");
      bool __first = true;
      if (__isset.part_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Part_id: ");
        __sb.Append(Part_id);
      }
      if (User != null && __isset.user) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("User: ");
        __sb.Append(User);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setUser_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public setUser_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setUser_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class exitAtt_args : TBase
  {

    public exitAtt_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("exitAtt_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("exitAtt_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class exitAtt_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public exitAtt_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("exitAtt_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("exitAtt_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class beginAtt_args : TBase
  {
    private int _shipper;
    private int _consignee;
    private int _mat;
    private string _user;

    public int Shipper
    {
      get
      {
        return _shipper;
      }
      set
      {
        __isset.shipper = true;
        this._shipper = value;
      }
    }

    public int Consignee
    {
      get
      {
        return _consignee;
      }
      set
      {
        __isset.consignee = true;
        this._consignee = value;
      }
    }

    public int Mat
    {
      get
      {
        return _mat;
      }
      set
      {
        __isset.mat = true;
        this._mat = value;
      }
    }

    public string User
    {
      get
      {
        return _user;
      }
      set
      {
        __isset.user = true;
        this._user = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool shipper;
      public bool consignee;
      public bool mat;
      public bool user;
    }

    public beginAtt_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Shipper = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Consignee = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Mat = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                User = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("beginAtt_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.shipper) {
          field.Name = "shipper";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Shipper);
          oprot.WriteFieldEnd();
        }
        if (__isset.consignee) {
          field.Name = "consignee";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Consignee);
          oprot.WriteFieldEnd();
        }
        if (__isset.mat) {
          field.Name = "mat";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Mat);
          oprot.WriteFieldEnd();
        }
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("beginAtt_args(");
      bool __first = true;
      if (__isset.shipper) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Shipper: ");
        __sb.Append(Shipper);
      }
      if (__isset.consignee) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Consignee: ");
        __sb.Append(Consignee);
      }
      if (__isset.mat) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mat: ");
        __sb.Append(Mat);
      }
      if (User != null && __isset.user) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("User: ");
        __sb.Append(User);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class beginAtt_result : TBase
  {
    private part_t _success;
    private DataProviderException _ex;

    public part_t Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public beginAtt_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new part_t();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("beginAtt_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("beginAtt_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class changePass_args : TBase
  {
    private string _login;
    private string _oldPass;
    private string _newPass;
    private string _newEmpl_id;

    public string Login
    {
      get
      {
        return _login;
      }
      set
      {
        __isset.login = true;
        this._login = value;
      }
    }

    public string OldPass
    {
      get
      {
        return _oldPass;
      }
      set
      {
        __isset.oldPass = true;
        this._oldPass = value;
      }
    }

    public string NewPass
    {
      get
      {
        return _newPass;
      }
      set
      {
        __isset.newPass = true;
        this._newPass = value;
      }
    }

    public string NewEmpl_id
    {
      get
      {
        return _newEmpl_id;
      }
      set
      {
        __isset.newEmpl_id = true;
        this._newEmpl_id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool login;
      public bool oldPass;
      public bool newPass;
      public bool newEmpl_id;
    }

    public changePass_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Login = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OldPass = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                NewPass = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                NewEmpl_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("changePass_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Login != null && __isset.login) {
          field.Name = "login";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Login);
          oprot.WriteFieldEnd();
        }
        if (OldPass != null && __isset.oldPass) {
          field.Name = "oldPass";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OldPass);
          oprot.WriteFieldEnd();
        }
        if (NewPass != null && __isset.newPass) {
          field.Name = "newPass";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NewPass);
          oprot.WriteFieldEnd();
        }
        if (NewEmpl_id != null && __isset.newEmpl_id) {
          field.Name = "newEmpl_id";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NewEmpl_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("changePass_args(");
      bool __first = true;
      if (Login != null && __isset.login) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Login: ");
        __sb.Append(Login);
      }
      if (OldPass != null && __isset.oldPass) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OldPass: ");
        __sb.Append(OldPass);
      }
      if (NewPass != null && __isset.newPass) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NewPass: ");
        __sb.Append(NewPass);
      }
      if (NewEmpl_id != null && __isset.newEmpl_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NewEmpl_id: ");
        __sb.Append(NewEmpl_id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class changePass_result : TBase
  {
    private bool _success;
    private DataProviderException _ex;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public DataProviderException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public changePass_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new DataProviderException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("changePass_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("changePass_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (Ex != null && __isset.ex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ex: ");
        __sb.Append(Ex== null ? "<null>" : Ex.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
